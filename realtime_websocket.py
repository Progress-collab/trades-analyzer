#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ WebSocket API Alor
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bid/ask –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import websockets
import json
import os
import logging
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AlorWebSocketMonitor:
    """Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket API Alor"""
    
    def __init__(self):
        self.token = self._load_token()
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ WebSocket endpoints
        self.websocket_urls = [
            "wss://api.alor.ru/ws",
            "wss://apiws.alor.ru/ws", 
            "wss://ws.alor.ru",
            "wss://api.alor.ru/md/v2/ws"
        ]
        self.quotes_data = {}
        self.running = False
        
        if not self.token:
            raise ValueError("API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å ALOR_API_TOKEN")
    
    def _load_token(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.environ.get('ALOR_API_TOKEN')
        if token:
            return token
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            try:
                with open(env_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line.startswith('ALOR_API_TOKEN='):
                            return line.split('=', 1)[1].strip()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        
        return None
    
    def load_instruments_list(self, filename: str = "instruments.txt") -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        instruments = []
        filepath = os.path.join(os.path.dirname(__file__), filename)
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        instruments.append(line.upper())
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {instruments}")
            return instruments
            
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def format_price_change(self, current, previous):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        if previous is None or current is None:
            return f"{current:>8.4f}" if current else "    N/A "
        
        if current > previous:
            return f"üìà{current:>7.4f}"  # –†–æ—Å—Ç
        elif current < previous:
            return f"üìâ{current:>7.4f}"  # –ü–∞–¥–µ–Ω–∏–µ
        else:
            return f"‚û°Ô∏è{current:>7.4f}"   # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    def display_quotes(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"""
        self.clear_screen()
        print("=" * 100)
        print("üî• REAL-TIME BID/ASK –ú–û–ù–ò–¢–û–†–ò–ù–ì ALOR (WebSocket)")
        print("=" * 100)
        print(f"{'–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç':<8} {'Bid':<12} {'Ask':<12} {'Last':<12} {'Spread':<8} {'–í—Ä–µ–º—è':<20}")
        print("-" * 100)
        
        for symbol, data in self.quotes_data.items():
            bid = data.get('bid', 'N/A')
            ask = data.get('ask', 'N/A')
            last = data.get('last_price', 'N/A')
            timestamp = data.get('timestamp', 'N/A')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            if isinstance(bid, (int, float)) and isinstance(ask, (int, float)):
                spread = ask - bid
                spread_str = f"{spread:.4f}"
            else:
                spread_str = "N/A"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if isinstance(timestamp, (int, float)):
                time_str = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = str(timestamp)[:20]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            bid_str = f"{bid:>8.4f}" if isinstance(bid, (int, float)) else str(bid)[:8]
            ask_str = f"{ask:>8.4f}" if isinstance(ask, (int, float)) else str(ask)[:8]
            last_str = f"{last:>8.4f}" if isinstance(last, (int, float)) else str(last)[:8]
            
            print(f"{symbol:<8} {bid_str:<12} {ask_str:<12} {last_str:<12} {spread_str:<8} {time_str:<20}")
        
        print("-" * 100)
        current_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} | üîÑ WebSocket | ‚ùå Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 100)
    
    async def subscribe_to_instrument(self, websocket, symbol: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        subscribe_formats = [
            # –§–æ—Ä–º–∞—Ç 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Alor
            {
                "opcode": "subscribe",
                "token": self.token,
                "exchange": "MOEX",
                "symbol": symbol,
                "format": "Simple"
            },
            # –§–æ—Ä–º–∞—Ç 2: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
            {
                "method": "subscribe",
                "token": self.token,
                "params": {
                    "exchange": "MOEX",
                    "symbol": symbol,
                    "type": "quotes"
                }
            },
            # –§–æ—Ä–º–∞—Ç 3: —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
            {
                "action": "subscribe",
                "token": self.token,
                "instrument": f"MOEX:{symbol}",
                "stream": "quotes"
            }
        ]
        
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol}")
        
        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for i, subscribe_message in enumerate(subscribe_formats):
            try:
                await websocket.send(json.dumps(subscribe_message))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} (—Ñ–æ—Ä–º–∞—Ç {i+1})")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {symbol}: {response[:100]}...")
                    break  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                except asyncio.TimeoutError:
                    logger.debug(f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {symbol} (—Ñ–æ—Ä–º–∞—Ç {i+1})")
                    continue
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {symbol} (—Ñ–æ—Ä–º–∞—Ç {i+1}): {e}")
                continue
    
    async def handle_message(self, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket"""
        try:
            data = json.loads(message)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            symbol = data.get('symbol')
            if not symbol:
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previous_data = self.quotes_data.get(symbol, {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            quote_update = {
                'bid': data.get('bid'),
                'ask': data.get('ask'),
                'last_price': data.get('last_price'),
                'timestamp': data.get('timestamp', datetime.now().timestamp()),
                'previous_bid': previous_data.get('bid'),
                'previous_ask': previous_data.get('ask'),
                'previous_last': previous_data.get('last_price')
            }
            
            self.quotes_data[symbol] = quote_update
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.display_quotes()
            
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def try_connect_to_websocket(self):
        """–ü—Ä–æ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–∞–∑–Ω—ã–º WebSocket URL"""
        for url in self.websocket_urls:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                connection_methods = [
                    # –ú–µ—Ç–æ–¥ 1: —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ websockets)
                    lambda: websockets.connect(url, extra_headers={"Authorization": f"Bearer {self.token}"}),
                    # –ú–µ—Ç–æ–¥ 2: –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)
                    lambda: websockets.connect(url),
                    # –ú–µ—Ç–æ–¥ 3: —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL
                    lambda: websockets.connect(f"{url}?token={self.token}")
                ]
                
                for i, method in enumerate(connection_methods):
                    try:
                        logger.debug(f"–ü—Ä–æ–±—É—é –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {i+1}")
                        websocket = await method()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {url} (–º–µ—Ç–æ–¥ {i+1})")
                        return websocket, url
                    except Exception as method_error:
                        logger.debug(f"–ú–µ—Ç–æ–¥ {i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {method_error}")
                        continue
                
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {url}: {e}")
                continue
        
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É WebSocket endpoint")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        instruments = self.load_instruments_list()
        
        if not instruments:
            print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        print("‚ùå –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–∞–∑–Ω—ã–º URL
            websocket, successful_url = await self.try_connect_to_websocket()
            
            try:
                logger.info(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {successful_url}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_variants = [
                    {"method": "authorize", "token": self.token},
                    {"opcode": "authorize", "token": self.token},  
                    {"action": "auth", "token": self.token},
                    {"type": "auth", "data": {"token": self.token}},
                    {"cmd": "auth", "args": [self.token]}
                ]
                
                auth_success = False
                for i, auth_message in enumerate(auth_variants):
                    try:
                        await websocket.send(json.dumps(auth_message))
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {i+1}: {list(auth_message.keys())}")
                        
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                        auth_response = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é {i+1}: {auth_response}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                        if "401" not in auth_response and "Invalid" not in auth_response:
                            auth_success = True
                            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–≤–∞—Ä–∏–∞–Ω—Ç {i+1})")
                            break
                        
                    except asyncio.TimeoutError:
                        logger.debug(f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é {i+1}")
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {i+1}: {e}")
                
                if not auth_success:
                    logger.warning("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                for symbol in instruments:
                    await self.subscribe_to_instrument(websocket, symbol)
                    await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                
                self.running = True
                
                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                while self.running:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                        await self.handle_message(message)
                    except asyncio.TimeoutError:
                        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –¥–∞–∂–µ –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if self.quotes_data:
                            self.display_quotes()
                        else:
                            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                    except websockets.exceptions.ConnectionClosed:
                        logger.error("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                        break
                        
            finally:
                await websocket.close()
                        
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            print("   2. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω") 
            print("   3. WebSocket endpoint –∏–∑–º–µ–Ω–∏–ª—Å—è")
            print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        monitor = AlorWebSocketMonitor()
        await monitor.start_monitoring()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
