#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª—ã —Å–¥–µ–ª–æ–∫ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
"""

import pandas as pd
import os
import shutil
import subprocess
import sys
from datetime import datetime
from typing import Dict, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trades_analyzer.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TradesAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self, trades_directory: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            trades_directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ —Å–¥–µ–ª–æ–∫ (–µ—Å–ª–∏ None, —Ç–æ –±—É–¥–µ—Ç –≤—ã–±–æ—Ä)
        """
        # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        if trades_directory is None:
            trades_directory = self._choose_source_directory()
        
        self.trades_directory = trades_directory
        self.auto_all_mode = (trades_directory == "auto_all")
        self.input_directory = os.path.join(os.getcwd(), "input")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É input –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(self.input_directory):
            os.makedirs(self.input_directory)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {self.input_directory}")
    
    def _choose_source_directory(self) -> str:
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Windows
        userprofile = os.environ.get('USERPROFILE', os.path.expanduser("~"))
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
        desktop_variants = [
            os.path.join(userprofile, "Desktop"),
            os.path.join(userprofile, "OneDrive", "Desktop"), 
            os.path.join(userprofile, "OneDrive", "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"),
            os.path.join(userprofile, "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
        ]
        
        desktop_path = None
        for variant in desktop_variants:
            if os.path.exists(variant):
                desktop_path = variant
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º USERPROFILE
        if desktop_path is None:
            desktop_path = userprofile
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—É—Ç–∏
        desktop_real_path = os.path.join(os.environ.get('USERPROFILE', ''), "OneDrive", "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
        kas_path = r"C:\Sandbox\glaze\Kas\user\current\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
        literuslan_path = r"C:\Sandbox\glaze\LiteRuslan\user\current\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
        
        sources = {
            1: {
                "name": "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "path": desktop_real_path
            },
            2: {
                "name": "–ü–∞–ø–∫–∞ Kas (–í–∞–Ω—è)", 
                "path": kas_path
            },
            3: {
                "name": "–ü–µ—Å–æ—á–Ω–∏—Ü–∞ LiteRuslan",
                "path": literuslan_path
            },
            4: {
                "name": "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö)",
                "path": "auto_all"
            }
        }
        
        print("\n" + "="*60)
        print("üìÅ –í–´–ë–û–† –ò–°–¢–û–ß–ù–ò–ö–ê –§–ê–ô–õ–û–í –°–î–ï–õ–û–ö")
        print("="*60)
        
        for key, source in sources.items():
            status = "‚úÖ" if os.path.exists(source["path"]) else "‚ùå"
            print(f"{key}. {source['name']}")
            print(f"   –ü—É—Ç—å: {source['path']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status} {'–î–æ—Å—Ç—É–ø–Ω–∞' if os.path.exists(source['path']) else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
            print()
        
        while True:
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (1, 2, 3 –∏–ª–∏ 4): ").strip()
                choice_num = int(choice)
                
                if choice_num == 4:
                    print("‚úÖ –í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                    return "auto_all"
                elif choice_num in sources and choice_num != 4:
                    selected_source = sources[choice_num]
                    if os.path.exists(selected_source["path"]):
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {selected_source['name']}")
                        print(f"üìÅ –ü—É—Ç—å: {selected_source['path']}")
                        return selected_source["path"]
                    else:
                        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {selected_source['path']}")
                        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4.")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2, 3 –∏–ª–∏ 4.")
            except KeyboardInterrupt:
                print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                sys.exit(1)
        
    def get_today_trades_file(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        today = datetime.now().strftime("%d.%m.%Y")
        filename = f"Trades_{today}.csv"
        filepath = os.path.join(self.trades_directory, filename)
        
        if os.path.exists(filepath):
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–¥–µ–ª–æ–∫: {filepath}")
            return filepath
        else:
            logger.warning(f"–§–∞–π–ª —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return None
    
    def copy_file_to_input(self, source_filepath: str) -> str:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É input —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Args:
            source_filepath: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            filename = os.path.basename(source_filepath)
            name, ext = os.path.splitext(filename)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_tag = ""
            if "Sandbox" in source_filepath and "LiteRuslan" in source_filepath:
                source_tag = "_LiteRuslan"
            elif "Sandbox" in source_filepath and "Kas" in source_filepath:
                source_tag = "_–í–∞–Ω—è"
            elif "OneDrive" in source_filepath and "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª" in source_filepath:
                source_tag = "_—Å—É–ø—Ä—É–≥–∞_–∏_–¥–æ—á—å"
            elif "Desktop" in source_filepath:
                source_tag = "_—Å—É–ø—Ä—É–≥–∞_–∏_–¥–æ—á—å"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Ç–∫—É –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if source_tag:
                filename = f"{name}{source_tag}_{timestamp}{ext}"
            else:
                filename = f"{name}_{timestamp}{ext}"
            
            destination = os.path.join(self.input_directory, filename)
            
            shutil.copy2(source_filepath, destination)
            logger.info(f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ input: {filename}")
            return destination
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return source_filepath  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    
    def create_and_open_excel(self, df: pd.DataFrame, source_filepath: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª –∏–∑ DataFrame –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            source_filepath: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è Excel —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            base_name = os.path.splitext(os.path.basename(source_filepath))[0]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_filename = f"{base_name}_analyzed_{timestamp}.xlsx"
            excel_path = os.path.join(self.input_directory, excel_filename)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                df.to_excel(writer, sheet_name='–î–∞–Ω–Ω—ã–µ', index=False)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                stats_data = []
                for col in df.columns:
                    if col in ['Price', 'Amount']:
                        numeric_col = pd.to_numeric(df[col], errors='coerce')
                        stats_data.append({
                            '–°—Ç–æ–ª–±–µ—Ü': col,
                            '–¢–∏–ø': str(df[col].dtype),
                            '–í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π': len(df[col]),
                            '–ü—É—Å—Ç—ã—Ö': df[col].isna().sum(),
                            '–í–∞–ª–∏–¥–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö': numeric_col.notna().sum() if not numeric_col.empty else 0,
                            '–ú–∏–Ω–∏–º—É–º': numeric_col.min() if numeric_col.notna().any() else 'N/A',
                            '–ú–∞–∫—Å–∏–º—É–º': numeric_col.max() if numeric_col.notna().any() else 'N/A',
                            '–°—Ä–µ–¥–Ω–µ–µ': numeric_col.mean() if numeric_col.notna().any() else 'N/A',
                            '–°—É–º–º–∞': numeric_col.sum() if numeric_col.notna().any() else 'N/A'
                        })
                    else:
                        stats_data.append({
                            '–°—Ç–æ–ª–±–µ—Ü': col,
                            '–¢–∏–ø': str(df[col].dtype),
                            '–í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π': len(df[col]),
                            '–ü—É—Å—Ç—ã—Ö': df[col].isna().sum(),
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': df[col].nunique(),
                            '–ü—Ä–∏–º–µ—Ä—ã': ', '.join(map(str, df[col].dropna().head(3).tolist()))
                        })
                
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
                
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞)
                if hasattr(self, '_last_ticker_analysis') and self._last_ticker_analysis:
                    ticker_summary = []
                    for ticker, data in self._last_ticker_analysis.items():
                        row = {
                            '–¢–∏–∫–µ—Ä': ticker,
                            '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫': data.get('total_trades', 0),
                            'Buy —Å–¥–µ–ª–æ–∫': data.get('buy_trades', 0),
                            'Sell —Å–¥–µ–ª–æ–∫': data.get('sell_trades', 0),
                            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': data.get('avg_price', 'N/A'),
                            '–ú–∏–Ω —Ü–µ–Ω–∞': data.get('min_price', 'N/A'),
                            '–ú–∞–∫—Å —Ü–µ–Ω–∞': data.get('max_price', 'N/A'),
                            'VWAP': data.get('vwap', 'N/A'),
                            '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º': data.get('avg_amount', 'N/A'),
                            '–û–±—â–∏–π –æ–±—ä–µ–º': data.get('total_amount', 'N/A'),
                            '–ß–∏—Å—Ç—ã–π –æ–±—ä–µ–º (Buy-Sell)': data.get('net_amount', 'N/A'),
                            '–û–±–æ—Ä–æ—Ç': data.get('total_turnover', 'N/A')
                        }
                        ticker_summary.append(row)
                    
                    if ticker_summary:
                        ticker_df = pd.DataFrame(ticker_summary)
                        ticker_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º', index=False)
                
                # –°–¥–µ–ª–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å 00:00:00)
                if hasattr(self, '_last_current_session_analysis') and self._last_current_session_analysis:
                    current_session_data = self._last_current_session_analysis
                    
                    # –õ–∏—Å—Ç —Å —Å–¥–µ–ª–∫–∞–º–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                    if 'current_session_dataframe' in current_session_data:
                        current_df = current_session_data['current_session_dataframe']
                        if len(current_df) > 0:
                            current_df.to_excel(writer, sheet_name='–¢–µ–∫—É—â–∞—è_—Å–µ—Å—Å–∏—è', index=False)
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                    if 'current_session_ticker_analysis' in current_session_data:
                        current_ticker_summary = []
                        for ticker, data in current_session_data['current_session_ticker_analysis'].items():
                            row = {
                                '–¢–∏–∫–µ—Ä': ticker,
                                '–°–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏': data.get('current_session_trades', 0),
                                'Current Buy': data.get('current_buy_trades', 0),
                                'Current Sell': data.get('current_sell_trades', 0),
                                '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å–µ—Å—Å–∏–∏': data.get('current_avg_price', 'N/A'),
                                '–ú–∏–Ω —Ü–µ–Ω–∞ —Å–µ—Å—Å–∏–∏': data.get('current_min_price', 'N/A'),
                                '–ú–∞–∫—Å —Ü–µ–Ω–∞ —Å–µ—Å—Å–∏–∏': data.get('current_max_price', 'N/A'),
                                'VWAP —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏': data.get('current_vwap', 'N/A'),
                                '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Å–µ—Å—Å–∏–∏': data.get('current_avg_amount', 'N/A'),
                                '–û–±—â–∏–π –æ–±—ä–µ–º —Å–µ—Å—Å–∏–∏': data.get('current_total_amount', 'N/A'),
                                '–ß–∏—Å—Ç—ã–π –æ–±—ä–µ–º —Å–µ—Å—Å–∏–∏ (Buy-Sell)': data.get('current_net_amount', 'N/A'),
                                '–û–±–æ—Ä–æ—Ç —Å–µ—Å—Å–∏–∏': data.get('current_turnover', 'N/A')
                            }
                            current_ticker_summary.append(row)
                        
                        if current_ticker_summary:
                            current_ticker_df = pd.DataFrame(current_ticker_summary)
                            current_ticker_df.to_excel(writer, sheet_name='–°–µ—Å—Å–∏—è_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º', index=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
                self._adjust_column_widths(writer)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç "–°–µ—Å—Å–∏—è_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º" –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                if '–°–µ—Å—Å–∏—è_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º' in writer.sheets:
                    workbook = writer.book
                    workbook.active = writer.sheets['–°–µ—Å—Å–∏—è_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º']
                    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: –°–µ—Å—Å–∏—è_–ø–æ_—Ç–∏–∫–µ—Ä–∞–º")
            
            logger.info(f"Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_filename}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª
            try:
                if sys.platform == "win32":
                    os.startfile(excel_path)
                elif sys.platform == "darwin":  # macOS
                    subprocess.run(["open", excel_path])
                else:  # Linux
                    subprocess.run(["xdg-open", excel_path])
                
                logger.info(f"Excel —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {excel_filename}")
                
                # –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π Excel —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å Excel —Ñ–∞–π–ª: {e}")
                logger.info(f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {excel_path}")
                
            return excel_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            return ""
    
    def _adjust_column_widths(self, writer):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ
        
        Args:
            writer: ExcelWriter –æ–±—ä–µ–∫—Ç
        """
        try:
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –≤ —Å—Ç–æ–ª–±—Ü–µ
                    for cell in column:
                        try:
                            cell_value = str(cell.value) if cell.value is not None else ""
                            # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏
                            if len(cell_value) > max_length:
                                max_length = len(cell_value)
                        except:
                            pass
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å –∑–∞–ø–∞—Å–æ–º
                    # –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 60, –ø–ª—é—Å –∑–∞–ø–∞—Å 3 —Å–∏–º–≤–æ–ª–∞
                    adjusted_width = max(10, min(max_length + 3, 60))
                    
                    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                    if any(keyword in str(column[0].value).lower() for keyword in ['—Ü–µ–Ω–∞', 'price', 'vwap', '–æ–±–æ—Ä–æ—Ç', '–æ–±—ä–µ–º']):
                        adjusted_width = max(adjusted_width, 15)
                    
                    worksheet.column_dimensions[column_letter].width = adjusted_width
                    
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ '{sheet_name}'")
                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
    
    def create_parsed_excel(self, df: pd.DataFrame, source_filepath: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Excel —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            source_filepath: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è Excel —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            base_name = os.path.splitext(os.path.basename(source_filepath))[0]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_filename = f"{base_name}_parsed_{timestamp}.xlsx"
            excel_path = os.path.join(self.input_directory, excel_filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Excel —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', index=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
                self._adjust_column_widths(writer)
            
            logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_filename}")
            return excel_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞: {e}")
            return ""
    
    def load_trades(self, filepath: str) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
        
        Args:
            filepath: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            encodings = ['utf-8', 'cp1251', 'windows-1251', 'utf-8-sig']
            separators = [';', ',', '\t', '|', '/']
            
            for encoding in encodings:
                for sep in separators:
                    try:
                        df = pd.read_csv(filepath, encoding=encoding, sep=sep)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                        if len(df.columns) > 1:
                            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding} –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}'")
                            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                            logger.info(f"–°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
                            return df
                        elif len(df.columns) == 1:
                            # –ï—Å–ª–∏ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é
                            column_name = df.columns[0]
                            if '/' in column_name:
                                # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                headers = column_name.split('/')
                                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                data_rows = []
                                for _, row in df.iterrows():
                                    row_data = str(row[column_name]).strip()
                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                                    if not row_data or row_data == 'nan':
                                        continue
                                    values = row_data.split('/')
                                    if len(values) == len(headers):
                                        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –≤ —á–∏—Å–ª–∞—Ö
                                        cleaned_values = []
                                        for i, val in enumerate(values):
                                            val = val.strip()
                                            # –î–ª—è Price, Fee, Amount –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                                            if headers[i] in ['Price', 'Fee', 'Amount'] and val:
                                                val = val.replace(',', '.')
                                            # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ None –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                                            if val == '' and headers[i] in ['Price', 'Fee', 'Amount']:
                                                val = None
                                            cleaned_values.append(val)
                                        data_rows.append(cleaned_values)
                                
                                if data_rows:
                                    new_df = pd.DataFrame(data_rows, columns=headers)
                                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                                    for col in new_df.columns:
                                        if col in ['Price', 'Fee', 'Amount']:
                                            new_df[col] = pd.to_numeric(new_df[col], errors='coerce')
                                    
                                    logger.info(f"–§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –≤—Ä—É—á–Ω—É—é: {len(new_df)} —Å—Ç—Ä–æ–∫, {len(new_df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                                    logger.info(f"–°—Ç–æ–ª–±—Ü—ã: {list(new_df.columns)}")
                                    return new_df
                    except UnicodeDecodeError:
                        continue
                    except Exception as e:
                        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding} –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {e}")
                        continue
            
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return None
    
    def calculate_averages(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–∞–º
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        results = {}
        
        try:
            # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ —Å {len(df.columns)} —Å—Ç–æ–ª–±—Ü–∞–º–∏: {list(df.columns)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns
            
            if len(numeric_columns) == 0:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Price –∏ Amount
                if 'Price' in df.columns and 'Amount' in df.columns:
                    logger.info("–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Price –∏ Amount –≤ —á–∏—Å–ª–∞")
                    df_copy = df.copy()
                    df_copy['Price'] = pd.to_numeric(df_copy['Price'], errors='coerce')
                    df_copy['Amount'] = pd.to_numeric(df_copy['Amount'], errors='coerce')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    numeric_columns = df_copy.select_dtypes(include=['int64', 'float64']).columns
                    df = df_copy
                    logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {list(numeric_columns)}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in numeric_columns:
                if not df[col].isna().all():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –ø—É—Å—Ç–æ–π
                    mean_value = df[col].mean()
                    results[f'avg_{col}'] = mean_value
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (VWAP)
            if 'Price' in df.columns and 'Amount' in df.columns:
                # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                clean_df = df[['Price', 'Amount']].dropna()
                
                if len(clean_df) > 0:
                    # VWAP = Œ£(Price √ó Amount) / Œ£(Amount)
                    total_volume = clean_df['Amount'].sum()
                    if total_volume > 0:
                        vwap = (clean_df['Price'] * clean_df['Amount']).sum() / total_volume
                        results['vwap_price'] = vwap
                        
                        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ —Ü–µ–Ω–µ
                        total_price_weight = clean_df['Price'].sum()
                        if total_price_weight > 0:
                            weighted_avg_amount = (clean_df['Amount'] * clean_df['Price']).sum() / total_price_weight
                            results['weighted_avg_amount'] = weighted_avg_amount
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    results['total_volume'] = total_volume
                    results['total_turnover'] = (clean_df['Price'] * clean_df['Amount']).sum()
                    results['valid_trades_count'] = len(clean_df)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            results['total_trades'] = len(df)
            results['analysis_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            if 'Ticker' in df.columns:
                ticker_analysis = self.analyze_by_ticker(df)
                results['ticker_analysis'] = ticker_analysis
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Excel
                self._last_ticker_analysis = ticker_analysis
            
            # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å 00:00:00)
            current_session_analysis = self.analyze_current_session_trades(df)
            results['current_session_analysis'] = current_session_analysis
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Excel
            self._last_current_session_analysis = current_session_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–∏—Ö: {e}")
        
        return results
    
    def analyze_by_ticker(self, df: pd.DataFrame) -> Dict[str, Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–∫–µ—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–∫–µ—Ä—É
        """
        ticker_results = {}
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            for ticker in df['Ticker'].unique():
                ticker_df = df[df['Ticker'] == ticker].copy()
                ticker_data = {}
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                ticker_data['total_trades'] = len(ticker_df)
                ticker_data['ticker'] = ticker
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫
                if 'Direction' in ticker_df.columns:
                    buy_trades = len(ticker_df[ticker_df['Direction'] == 'Buy'])
                    sell_trades = len(ticker_df[ticker_df['Direction'] == 'Sell'])
                    ticker_data['buy_trades'] = buy_trades
                    ticker_data['sell_trades'] = sell_trades
                
                # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
                if 'Price' in ticker_df.columns:
                    prices = ticker_df['Price'].dropna()
                    if len(prices) > 0:
                        ticker_data['avg_price'] = prices.mean()
                        ticker_data['min_price'] = prices.min()
                        ticker_data['max_price'] = prices.max()
                        ticker_data['price_std'] = prices.std()
                        ticker_data['valid_price_trades'] = len(prices)
                
                # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
                if 'Amount' in ticker_df.columns:
                    amounts = ticker_df['Amount'].dropna()
                    if len(amounts) > 0:
                        ticker_data['avg_amount'] = amounts.mean()
                        ticker_data['total_amount'] = amounts.sum()
                        ticker_data['min_amount'] = amounts.min()
                        ticker_data['max_amount'] = amounts.max()
                        
                        # –ß–∏—Å—Ç—ã–π –æ–±—ä–µ–º —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Buy: +, Sell: -)
                        if 'Direction' in ticker_df.columns:
                            net_amount = 0
                            for _, row in ticker_df.iterrows():
                                if pd.notna(row['Amount']):
                                    if row['Direction'] == 'Buy':
                                        net_amount += row['Amount']
                                    elif row['Direction'] == 'Sell':
                                        net_amount -= row['Amount']
                            ticker_data['net_amount'] = net_amount
                
                # VWAP –¥–ª—è —Ç–∏–∫–µ—Ä–∞
                if 'Price' in ticker_df.columns and 'Amount' in ticker_df.columns:
                    clean_ticker_df = ticker_df[['Price', 'Amount']].dropna()
                    if len(clean_ticker_df) > 0:
                        total_volume = clean_ticker_df['Amount'].sum()
                        if total_volume > 0:
                            vwap = (clean_ticker_df['Price'] * clean_ticker_df['Amount']).sum() / total_volume
                            ticker_data['vwap'] = vwap
                            ticker_data['total_turnover'] = (clean_ticker_df['Price'] * clean_ticker_df['Amount']).sum()
                
                ticker_results[ticker] = ticker_data
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ —Ç–∏–∫–µ—Ä–∞–º: {e}")
        
        return ticker_results
    
    def analyze_current_session_trades(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å 00:00:00)
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–¥–µ–ª–∫–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        """
        results = {}
        
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            if 'DateCreate' in df.columns:
                current_session_df = df[df['DateCreate'] != '00:00:00'].copy()
                transfers_df = df[df['DateCreate'] == '00:00:00'].copy()
                
                if len(current_session_df) == 0:
                    logger.warning("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return {"error": "–ù–µ—Ç —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"}
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                results['current_session_trades'] = len(current_session_df)
                results['transfers_trades'] = len(transfers_df)
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                if 'Direction' in current_session_df.columns:
                    buy_trades = len(current_session_df[current_session_df['Direction'] == 'Buy'])
                    sell_trades = len(current_session_df[current_session_df['Direction'] == 'Sell'])
                    results['current_session_buy_trades'] = buy_trades
                    results['current_session_sell_trades'] = sell_trades
                
                # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–æ–≤ –¥–ª—è —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                if 'Price' in current_session_df.columns and 'Amount' in current_session_df.columns:
                    clean_current_df = current_session_df[['Price', 'Amount']].dropna()
                    
                    if len(clean_current_df) > 0:
                        # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ä–µ–¥–Ω–∏–µ
                        results['current_session_avg_price'] = clean_current_df['Price'].mean()
                        results['current_session_avg_amount'] = clean_current_df['Amount'].mean()
                        results['current_session_total_volume'] = clean_current_df['Amount'].sum()
                        
                        # VWAP –¥–ª—è —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                        total_volume = clean_current_df['Amount'].sum()
                        if total_volume > 0:
                            vwap = (clean_current_df['Price'] * clean_current_df['Amount']).sum() / total_volume
                            results['current_session_vwap'] = vwap
                            results['current_session_turnover'] = (clean_current_df['Price'] * clean_current_df['Amount']).sum()
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º –¥–ª—è —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                if 'Ticker' in current_session_df.columns:
                    current_session_ticker_analysis = {}
                    
                    for ticker in current_session_df['Ticker'].unique():
                        ticker_current_df = current_session_df[current_session_df['Ticker'] == ticker].copy()
                        ticker_data = {}
                        
                        ticker_data['current_session_trades'] = len(ticker_current_df)
                        
                        if 'Direction' in ticker_current_df.columns:
                            ticker_data['current_buy_trades'] = len(ticker_current_df[ticker_current_df['Direction'] == 'Buy'])
                            ticker_data['current_sell_trades'] = len(ticker_current_df[ticker_current_df['Direction'] == 'Sell'])
                        
                        if 'Price' in ticker_current_df.columns:
                            prices = ticker_current_df['Price'].dropna()
                            if len(prices) > 0:
                                ticker_data['current_avg_price'] = prices.mean()
                                ticker_data['current_min_price'] = prices.min()
                                ticker_data['current_max_price'] = prices.max()
                        
                        if 'Amount' in ticker_current_df.columns:
                            amounts = ticker_current_df['Amount'].dropna()
                            if len(amounts) > 0:
                                ticker_data['current_avg_amount'] = amounts.mean()
                                ticker_data['current_total_amount'] = amounts.sum()
                                
                                # –ß–∏—Å—Ç—ã–π –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Buy: +, Sell: -)
                                if 'Direction' in ticker_current_df.columns:
                                    net_amount = 0
                                    for _, row in ticker_current_df.iterrows():
                                        if pd.notna(row['Amount']):
                                            if row['Direction'] == 'Buy':
                                                net_amount += row['Amount']
                                            elif row['Direction'] == 'Sell':
                                                net_amount -= row['Amount']
                                    ticker_data['current_net_amount'] = net_amount
                        
                        # VWAP –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)
                        if 'Price' in ticker_current_df.columns and 'Amount' in ticker_current_df.columns:
                            clean_ticker_df = ticker_current_df[['Price', 'Amount']].dropna()
                            if len(clean_ticker_df) > 0:
                                total_volume = clean_ticker_df['Amount'].sum()
                                if total_volume > 0:
                                    vwap = (clean_ticker_df['Price'] * clean_ticker_df['Amount']).sum() / total_volume
                                    ticker_data['current_vwap'] = vwap
                                    ticker_data['current_turnover'] = (clean_ticker_df['Price'] * clean_ticker_df['Amount']).sum()
                        
                        current_session_ticker_analysis[ticker] = ticker_data
                    
                    results['current_session_ticker_analysis'] = current_session_ticker_analysis
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
                results['current_session_dataframe'] = current_session_df
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–¥–µ–ª–æ–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: {e}")
        
        return results
    
    def analyze_all_sources(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Returns:
            –°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        all_results = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        desktop_path = os.path.join(os.environ.get('USERPROFILE', ''), "OneDrive", "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
        kas_path = r"C:\Sandbox\glaze\Kas\user\current\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
        literuslan_path = r"C:\Sandbox\glaze\LiteRuslan\user\current\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
        
        sources_to_analyze = [
            {"name": "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª (—Å—É–ø—Ä—É–≥–∞ –∏ –¥–æ—á—å)", "path": desktop_path, "tag": "_—Å—É–ø—Ä—É–≥–∞_–∏_–¥–æ—á—å"},
            {"name": "Kas (–í–∞–Ω—è)", "path": kas_path, "tag": "_–í–∞–Ω—è"},
            {"name": "LiteRuslan", "path": literuslan_path, "tag": "_LiteRuslan"}
        ]
        
        print("\n" + "="*60)
        print("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í")
        print("="*60)
        
        for i, source in enumerate(sources_to_analyze, 1):
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {i}/3: {source['name']}")
            print("-" * 40)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            original_directory = self.trades_directory
            self.trades_directory = source["path"]
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                filepath = self.get_today_trades_file()
                
                if filepath and os.path.exists(filepath):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {os.path.basename(filepath)}")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–µ—Ç–∫–æ–π
                    copied_filepath = self.copy_file_to_input(filepath)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = self.load_trades(copied_filepath)
                    if df is not None:
                        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π Excel (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö)
                        parsed_excel_path = self.create_parsed_excel(df, copied_filepath)
                        results = self.calculate_averages(df)
                        excel_path = self.create_and_open_excel(df, copied_filepath)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        results['source_name'] = source['name']
                        results['source_file'] = filepath
                        results['copied_file'] = copied_filepath
                        results['excel_file'] = excel_path
                        
                        all_results[source['name']] = results
                        
                        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(df)} —Å–¥–µ–ª–æ–∫")
                        if 'total_turnover' in results:
                            print(f"üí∞ –û–±–æ—Ä–æ—Ç: {results['total_turnover']:,.2f} ‚ÇΩ")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                        all_results[source['name']] = {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}
                else:
                    print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    all_results[source['name']] = {"error": "–§–∞–π–ª —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                all_results[source['name']] = {"error": str(e)}
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                self.trades_directory = original_directory
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        self.print_all_sources_summary(all_results)
        
        return all_results
    
    def print_all_sources_summary(self, all_results: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        
        Args:
            all_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ü–û –í–°–ï–ú –ò–°–¢–û–ß–ù–ò–ö–ê–ú")
        print("="*60)
        
        total_trades = 0
        total_turnover = 0
        
        for source_name, results in all_results.items():
            if 'error' not in results:
                trades = results.get('total_trades', 0)
                turnover = results.get('total_turnover', 0)
                vwap = results.get('vwap_price', 0)
                
                total_trades += trades
                total_turnover += turnover
                
                print(f"\nüî∏ {source_name}:")
                print(f"   –°–¥–µ–ª–æ–∫: {trades}")
                print(f"   VWAP: {vwap:,.4f} ‚ÇΩ")
                print(f"   –û–±–æ—Ä–æ—Ç: {turnover:,.2f} ‚ÇΩ")
            else:
                print(f"\n‚ùå {source_name}: {results['error']}")
        
        print(f"\n" + "="*40)
        print(f"üìà –ò–¢–û–ì–û –ü–û –í–°–ï–ú –ò–°–¢–û–ß–ù–ò–ö–ê–ú:")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"   –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_turnover:,.2f} ‚ÇΩ")
        print("="*60)
    
    def analyze_today(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        original_filepath = self.get_today_trades_file()
        if not original_filepath:
            return {"error": "–§–∞–π–ª —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É input
        copied_filepath = self.copy_file_to_input(original_filepath)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "/"
        logger.info("–ü–∞—Ä—Å–∏–º CSV —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '/'...")
        df = self.load_trades(copied_filepath)
        if df is None:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"}
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º)
        parsed_excel_path = self.create_parsed_excel(df, copied_filepath)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º)
        results = self.calculate_averages(df)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π Excel —Ñ–∞–π–ª (—É–∂–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º)
        excel_path = self.create_and_open_excel(df, copied_filepath)
        results['source_file'] = original_filepath
        results['copied_file'] = copied_filepath
        results['parsed_excel_file'] = parsed_excel_path
        results['excel_file'] = excel_path
        
        return results
    
    def print_results(self, results: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        if 'error' in results:
            print(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
            return
        
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –°–î–ï–õ–û–ö")
        print("="*60)
        
        if 'source_file' in results:
            print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(results['source_file'])}")
        
        if 'copied_file' in results:
            print(f"üìÇ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: {os.path.relpath(results['copied_file'])}")
        
        if 'parsed_excel_file' in results and results['parsed_excel_file']:
            print(f"üìã –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π Excel: {os.path.relpath(results['parsed_excel_file'])}")
        
        if 'excel_file' in results and results['excel_file']:
            print(f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π Excel: {os.path.relpath(results['excel_file'])}")
        
        if 'total_trades' in results:
            print(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['total_trades']}")
        
        if 'valid_trades_count' in results:
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {results['valid_trades_count']}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if 'total_volume' in results:
            print(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {results['total_volume']:.4f}")
        
        if 'total_turnover' in results:
            print(f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {results['total_turnover']:,.2f} ‚ÇΩ")
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\nüìä –ü–†–û–°–¢–´–ï –°–†–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
        print("-" * 40)
        
        for key, value in results.items():
            if key.startswith('avg_'):
                column_name = key[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'avg_'
                if column_name == 'Price':
                    print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {value:,.4f} ‚ÇΩ")
                elif column_name == 'Amount':
                    print(f"–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {value:.4f}")
                else:
                    print(f"{column_name}: {value:.4f}")
        
        # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        has_weighted = any(key in results for key in ['vwap_price', 'weighted_avg_amount'])
        if has_weighted:
            print("\n‚öñÔ∏è  –°–†–ï–î–ù–ï–í–ó–í–ï–®–ï–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
            print("-" * 40)
            
            if 'vwap_price' in results:
                print(f"VWAP (—Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞): {results['vwap_price']:,.4f} ‚ÇΩ")
            
            if 'weighted_avg_amount' in results:
                print(f"–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º: {results['weighted_avg_amount']:.4f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        if 'ticker_analysis' in results and results['ticker_analysis']:
            print("\nüìä –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ö–ï–†–ê–ú:")
            print("="*60)
            
            for ticker, data in results['ticker_analysis'].items():
                print(f"\nüî∏ {ticker}:")
                print(f"   –°–¥–µ–ª–æ–∫: {data.get('total_trades', 0)} (Buy: {data.get('buy_trades', 0)}, Sell: {data.get('sell_trades', 0)})")
                
                if 'avg_price' in data:
                    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {data['avg_price']:,.4f} ‚ÇΩ")
                if 'min_price' in data and 'max_price' in data:
                    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {data['min_price']:,.4f} - {data['max_price']:,.4f} ‚ÇΩ")
                if 'vwap' in data:
                    print(f"   VWAP: {data['vwap']:,.4f} ‚ÇΩ")
                if 'avg_amount' in data:
                    print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {data['avg_amount']:.2f}")
                if 'total_amount' in data:
                    print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {data['total_amount']:.0f}")
                if 'net_amount' in data:
                    net_val = data['net_amount']
                    direction = "üìà" if net_val > 0 else "üìâ" if net_val < 0 else "‚û°Ô∏è"
                    print(f"   –ß–∏—Å—Ç—ã–π –æ–±—ä–µ–º: {direction} {net_val:+.0f}")
                if 'total_turnover' in data:
                    print(f"   –û–±–æ—Ä–æ—Ç: {data['total_turnover']:,.2f} ‚ÇΩ")
        
        if 'analysis_date' in results:
            print(f"\n‚è∞ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {results['analysis_date']}")
        
        print("="*60)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = TradesAnalyzer()
    
    if analyzer.auto_all_mode:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        all_results = analyzer.analyze_all_sources()
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫
        results = analyzer.analyze_today()
        analyzer.print_results(results)


if __name__ == "__main__":
    main()
