#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ bid/ask –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ API Alor
–û–±–Ω–æ–≤–ª—è–µ–º–∞—è –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
"""

import os
import time
import logging
from datetime import datetime
from alor_api import AlorAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.ERROR)


class RealTimeMonitor:
    """Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self, update_interval=1.0):
        """
        Args:
            update_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.alor = AlorAPI()
        self.update_interval = update_interval
        self.running = False
        self.previous_data = {}
        
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def format_price_change(self, current, previous):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        
        Args:
            current: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            previous: –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        if previous is None or current is None:
            return f"{current:>8.4f}" if current else "    N/A "
        
        if current > previous:
            return f"üìà{current:>7.4f}"  # –†–æ—Å—Ç
        elif current < previous:
            return f"üìâ{current:>7.4f}"  # –ü–∞–¥–µ–Ω–∏–µ
        else:
            return f"‚û°Ô∏è{current:>7.4f}"   # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        print("=" * 90)
        print("üî• REAL-TIME BID/ASK –ú–û–ù–ò–¢–û–†–ò–ù–ì ALOR")
        print("=" * 90)
        print(f"{'–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç':<8} {'Bid':<12} {'Ask':<12} {'Last':<12} {'Change %':<10} {'–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏':<19}")
        print("-" * 90)
    
    def print_quote_row(self, symbol, data):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            data: –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        """
        if 'error' in data:
            print(f"{symbol:<8} {'ERROR':<12} {'ERROR':<12} {'ERROR':<12} {'ERROR':<10} {'ERROR':<19}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        bid = data.get('bid')
        ask = data.get('ask') 
        last = data.get('last_price')
        change_pct = data.get('change_percent', 0)
        trade_time = data.get('last_trade_time', 'N/A')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        prev_data = self.previous_data.get(symbol, {})
        prev_bid = prev_data.get('bid')
        prev_ask = prev_data.get('ask')
        prev_last = prev_data.get('last_price')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        bid_str = self.format_price_change(bid, prev_bid)
        ask_str = self.format_price_change(ask, prev_ask)
        last_str = self.format_price_change(last, prev_last)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        if change_pct > 0:
            change_str = f"üìà{change_pct:+6.2f}%"
        elif change_pct < 0:
            change_str = f"üìâ{change_pct:+6.2f}%"
        else:
            change_str = f"‚û°Ô∏è{change_pct:+6.2f}%"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã)
        if trade_time != 'N/A' and 'T' in trade_time:
            time_only = trade_time.split('T')[1][:8]  # HH:MM:SS
        else:
            time_only = trade_time
        
        print(f"{symbol:<8} {bid_str:<12} {ask_str:<12} {last_str:<12} {change_str:<10} {time_only:<19}")
    
    def print_footer(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥–≤–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        print("-" * 90)
        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} | üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}—Å | ‚ùå Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 90)
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            instruments = self.alor.load_instruments_list()
            
            if not instruments:
                print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            quotes = self.alor.get_multiple_quotes(instruments)
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
            self.clear_screen()
            self.print_header()
            
            # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            for symbol in instruments:
                data = quotes.get(symbol, {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
                self.print_quote_row(symbol, data)
            
            self.print_footer()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            self.previous_data = {
                symbol: data for symbol, data in quotes.items() 
                if 'error' not in data
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üöÄ –ó–∞–ø—É—Å–∫ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print("‚ùå –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        try:
            instruments = self.alor.load_instruments_list()
            if not instruments:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {', '.join(instruments)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            return
        
        time.sleep(2)
        self.running = True
        
        try:
            iteration = 0
            while self.running:
                iteration += 1
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{iteration}...")
                self.update_display()
                time.sleep(self.update_interval)
                
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        except Exception as e:
            print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.running = False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì BID/ASK")
    print("=" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    interval = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {interval} —Å–µ–∫—É–Ω–¥—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = RealTimeMonitor(update_interval=interval)
    monitor.start_monitoring()


if __name__ == "__main__":
    main()
