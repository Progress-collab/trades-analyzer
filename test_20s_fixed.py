#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ - —Å—Ç—Ä–æ–≥–æ 20 —Å–µ–∫—É–Ω–¥ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
"""

import sys
import os
from datetime import datetime
from time import sleep, time
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy


def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('ALOR_API_TOKEN='):
                    return line.split('=', 1)[1].strip().strip("'\"")
    return None


def main():
    print("‚ö° –¢–ï–°–¢ –ó–ê–î–ï–†–ñ–ö–ò - –°–¢–†–û–ì–û 20 –°–ï–ö–£–ù–î")
    print("=" * 50)
    
    measurements = []
    running = [True]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    
    def on_update(response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not running[0]:
            return
            
        try:
            now = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                
                measurements.append({
                    'time': now,
                    'bid': bid,
                    'ask': ask
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ 5-–µ
                if len(measurements) % 5 == 0:
                    print(f"üìä #{len(measurements):2d} | {now.strftime('%H:%M:%S.%f')[:-3]} | Bid: {bid:.4f}")
                    
        except:
            pass
    
    def stop_timer():
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥"""
        sleep(20)
        running[0] = False
        print("\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ - –°–¢–û–ü!")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        token = load_token()
        ap = AlorPy(refresh_token=token)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞
        ap.on_change_order_book = on_update
        guid = ap.order_book_get_and_subscribe('MOEX', 'PDU5')
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {guid[:8]}...")
        print("-" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        timer = threading.Thread(target=stop_timer)
        timer.daemon = True
        timer.start()
        
        start_time = time()
        
        # –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while running[0] and (time() - start_time) < 21:  # +1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–ø–∞—Å
            sleep(0.1)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        running[0] = False
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if measurements:
            total_time = (measurements[-1]['time'] - measurements[0]['time']).total_seconds()
            frequency = len(measurements) / total_time if total_time > 0 else 0
            
            print("\nüìä –ò–¢–û–ì–ò:")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(measurements)}")
            print(f"   –í—Ä–µ–º—è: {total_time:.1f}—Å") 
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.1f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
            
            if len(measurements) > 1:
                intervals = []
                for i in range(1, len(measurements)):
                    interval_ms = (measurements[i]['time'] - measurements[i-1]['time']).total_seconds() * 1000
                    intervals.append(interval_ms)
                
                avg_interval = sum(intervals) / len(intervals)
                min_interval = min(intervals)
                max_interval = max(intervals)
                
                print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.0f}–º—Å")
                print(f"   –ú–∏–Ω-–ú–∞–∫—Å: {min_interval:.0f}-{max_interval:.0f}–º—Å")
                
                if avg_interval < 500:
                    print("   ‚úÖ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!")
                elif avg_interval < 1000:
                    print("   ‚úÖ –•–û–†–û–®–û: –ë—ã—Å—Ç—Ä–æ")
                else:
                    print("   ‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û")
        
        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è")
        
        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket (–∏–∑–±–µ–≥–∞–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏—è)
        os._exit(0)
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        os._exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        os._exit(1)


if __name__ == "__main__":
    main()
