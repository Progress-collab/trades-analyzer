#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ - 20 —Å–µ–∫—É–Ω–¥ —Å —Ç–∞–π–º–µ—Ä–æ–º
"""

import sys
import os
import logging
from datetime import datetime
from time import sleep
import signal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy

# –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
logging.basicConfig(level=logging.CRITICAL)


class SimpleLatencyTest:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    
    def __init__(self):
        self.refresh_token = self._load_token()
        self.ap = None
        self.measurements = []
        self.start_time = None
        self.running = False
        self.guid = None
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    def on_update(self, response):
        """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        if not self.running:
            return
            
        try:
            now = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                
                self.measurements.append({
                    'time': now,
                    'bid': bid,
                    'ask': ask
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ 3-–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if len(self.measurements) % 3 == 0:
                    elapsed = (now - self.start_time).total_seconds()
                    remaining = 20 - elapsed
                    print(f"üìä #{len(self.measurements):2d} | {now.strftime('%H:%M:%S.%f')[:-3]} | "
                          f"Bid: {bid:8.4f} | Ask: {ask:8.4f} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining:4.1f}—Å")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def timeout_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
        self.running = False
        print("\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ - –∞–≤—Ç–æ—Å—Ç–æ–ø")
    
    def run_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç"""
        print("‚è±Ô∏è  –¢–ï–°–¢ –ó–ê–î–ï–†–ñ–ö–ò - 20 –°–ï–ö–£–ù–î")
        print("=" * 50)
        
        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AlorPy...")
            self.ap = AlorPy(refresh_token=self.refresh_token)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
            
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ PDU5...")
            self.ap.on_change_order_book = self.on_update
            
            self.start_time = datetime.now()
            self.running = True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 20 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix/Linux)
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª
            if os.name != 'nt':
                signal.signal(signal.SIGALRM, self.timeout_handler)
                signal.alarm(20)
            
            self.guid = self.ap.order_book_get_and_subscribe('MOEX', 'PDU5')
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {self.guid}")
            print("-" * 50)
            
            # –î–ª—è Windows - –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
            if os.name == 'nt':
                while self.running:
                    elapsed = (datetime.now() - self.start_time).total_seconds()
                    if elapsed >= 20:
                        self.running = False
                        print("\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ - –∞–≤—Ç–æ—Å—Ç–æ–ø")
                        break
                    sleep(0.1)
            else:
                # –î–ª—è Unix - –∂–¥–µ–º —Å–∏–≥–Ω–∞–ª
                while self.running:
                    sleep(0.1)
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.running = False
        
        finally:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞...")
            try:
                if self.guid and self.ap:
                    print("üì§ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
                    self.ap.unsubscribe(self.guid)
                    sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø–∏—Å–∫—É
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.show_results()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
            try:
                if self.ap:
                    print("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket...")
                    self.ap.close_web_socket()
                    print("‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def show_results(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        if not self.measurements:
            print("‚ùå –ù–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            return
        
        total_time = (self.measurements[-1]['time'] - self.measurements[0]['time']).total_seconds()
        updates_count = len(self.measurements)
        frequency = updates_count / total_time if total_time > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        intervals = []
        for i in range(1, len(self.measurements)):
            interval_ms = (self.measurements[i]['time'] - self.measurements[i-1]['time']).total_seconds() * 1000
            intervals.append(interval_ms)
        
        print("\n" + "="*60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ó–ê–î–ï–†–ñ–ö–ò")
        print("="*60)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:         {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:     {updates_count}")
        print(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:   {frequency:.1f} —Ä–∞–∑/—Å–µ–∫—É–Ω–¥—É")
        
        if intervals:
            avg_interval = sum(intervals) / len(intervals)
            min_interval = min(intervals)
            max_interval = max(intervals)
            
            print(f"üìà –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:     {avg_interval:.0f} –º—Å")
            print(f"üìà –ú–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª:        {min_interval:.0f} –º—Å") 
            print(f"üìà –ú–∞–∫—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª:       {max_interval:.0f} –º—Å")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if avg_interval < 500:
                print("‚úÖ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
            elif avg_interval < 1000:
                print("‚úÖ –•–û–†–û–®–û: –ë—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û: –†–µ–¥–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        print("="*60)


def main():
    try:
        test = SimpleLatencyTest()
        test.run_test()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
