#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö Alor API - 20 —Å–µ–∫—É–Ω–¥
"""

import sys
import os
import logging
from datetime import datetime
from time import sleep, time
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR)


class LatencyTest20s:
    """–¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ 20 —Å–µ–∫—É–Ω–¥"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
        self.refresh_token = self._load_token()
        if not self.refresh_token:
            raise ValueError("Refresh Token –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        self.ap = AlorPy(refresh_token=self.refresh_token)
        self.measurements = []
        self.start_time = None
        self.running = False
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ .env"""
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    def on_orderbook_update(self, response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.running:
            return
            
        try:
            receive_time = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                
                # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ - –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è vs —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                measurement = {
                    'receive_time': receive_time,
                    'bid': bid,
                    'ask': ask,
                    'measurement_number': len(self.measurements) + 1
                }
                
                self.measurements.append(measurement)
                
                # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ 5-–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
                if len(self.measurements) % 5 == 0:
                    elapsed = (receive_time - self.start_time).total_seconds()
                    print(f"üìä #{len(self.measurements):2d} | {receive_time.strftime('%H:%M:%S.%f')[:-3]} | "
                          f"Bid: {bid:8.4f} | Ask: {ask:8.4f} | {elapsed:4.1f}—Å")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def calculate_frequency_stats(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if len(self.measurements) < 2:
            return
        
        intervals = []
        for i in range(1, len(self.measurements)):
            interval = (self.measurements[i]['receive_time'] - self.measurements[i-1]['receive_time']).total_seconds() * 1000
            intervals.append(interval)
        
        if intervals:
            avg_interval = sum(intervals) / len(intervals)
            min_interval = min(intervals)
            max_interval = max(intervals)
            frequency = 1000 / avg_interval if avg_interval > 0 else 0
            
            print("\n" + "="*70)
            print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–°–¢–û–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–ô")
            print("="*70)
            print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:    {len(self.measurements)}")
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:    {avg_interval:6.1f} –º—Å")
            print(f"üìä –ú–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª:       {min_interval:6.1f} –º—Å")
            print(f"üìä –ú–∞–∫—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª:      {max_interval:6.1f} –º—Å")
            print(f"üìä –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {frequency:6.1f} —Ä–∞–∑/—Å–µ–∫")
            print("="*70)
    
    def auto_stop_timer(self):
        """–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥"""
        sleep(20)
        self.running = False
        print(f"\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    
    def start_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ 20 —Å–µ–∫—É–Ω–¥"""
        print("‚è±Ô∏è  –¢–ï–°–¢ –ó–ê–î–ï–†–ñ–ö–ò WEBSOCKET - 20 –°–ï–ö–£–ù–î")
        print("=" * 60)
        print("üéØ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ PDU5...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.ap.on_change_order_book = self.on_orderbook_update
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            guid = self.ap.order_book_get_and_subscribe('MOEX', 'PDU5')
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {guid}")
            print("‚ö° –ò–∑–º–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            print("-" * 60)
            
            self.start_time = datetime.now()
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            timer_thread = threading.Thread(target=self.auto_stop_timer)
            timer_thread.daemon = True
            timer_thread.start()
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while self.running:
                sleep(0.1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.running = False
        
        finally:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_time = (datetime.now() - self.start_time).total_seconds()
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
            print(f"   –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(self.measurements)}")
            
            if len(self.measurements) > 0:
                avg_per_sec = len(self.measurements) / total_time
                print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {avg_per_sec:.1f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
                
                self.calculate_frequency_stats()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                self.ap.unsubscribe(guid)
                self.ap.close_web_socket()
                print("‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç")
            except:
                pass


def main():
    try:
        test = LatencyTest20s()
        test.start_test()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    main()
