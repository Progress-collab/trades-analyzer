#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã cTrader API –º–æ–¥—É–ª—è
"""

import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(__file__))

try:
    from ctrader_api import CTraderAPI
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª ctrader_api.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)


def test_ctrader_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É cTrader API"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('ctrader_test.log', encoding='utf-8')
        ]
    )
    
    logger = logging.getLogger(__name__)
    
    print("="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï cTrader FxPro API")
    print("="*60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞...")
        ctrader = CTraderAPI()
        print("‚úÖ API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        instruments = ctrader.load_instruments_list()
        
        if not instruments:
            print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª crypto_instruments.txt")
            return False
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {instruments}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        if ctrader._ensure_authenticated():
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials –≤ —Ñ–∞–π–ª–µ .env:")
            print("   - CTRADER_CLIENT_ID")
            print("   - CTRADER_CLIENT_SECRET")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏...")
        test_symbol = instruments[0] if instruments else 'BITCOIN'
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è: {test_symbol}")
        
        quote = ctrader.get_quote(test_symbol)
        if quote:
            print("‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –î–∞–Ω–Ω—ã–µ: {quote}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints API")
            print("   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫...")
        test_instruments = instruments[:3] if len(instruments) >= 3 else instruments
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è: {test_instruments}")
        
        quotes = ctrader.get_multiple_quotes(test_instruments)
        
        successful_quotes = sum(1 for data in quotes.values() if 'error' not in data)
        failed_quotes = len(quotes) - successful_quotes
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful_quotes} —É—Å–ø–µ—à–Ω–æ, {failed_quotes} —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n6Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        ctrader.print_quotes(quotes)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        if successful_quotes > 0:
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"   - –ü–æ–ª—É—á–µ–Ω–æ {successful_quotes} –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
            print(f"   - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {failed_quotes} –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
            
            if failed_quotes > 0:
                print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                print("   - –£—Ç–æ—á–Ω–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ cTrader")
                print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ")
            print("   - –ù–∏ –æ–¥–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            print("\nüí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
            print("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials –≤ .env —Ñ–∞–π–ª–µ")
            print("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cTrader Open API")
            print("   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å endpoints –≤ –∫–æ–¥–µ")
            print("   4. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FxPro")
            return False
    
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
        return False


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    required_files = [
        'ctrader_api.py',
        'crypto_instruments.txt',
        'env_template.txt'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env_template.txt")
        print("   –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ cTrader credentials")
        return False
    
    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cTrader API - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    success = test_ctrader_api()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ —Ñ–∞–π–ª: ctrader_test.log")


if __name__ == "__main__":
    main()
