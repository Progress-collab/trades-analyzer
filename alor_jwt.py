#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket API Alor –∏–∑ Refresh Token
"""

import os
import requests
import json
import logging
from datetime import datetime
from typing import Optional

logger = logging.getLogger(__name__)


class AlorJWTManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è Alor API"""
    
    def __init__(self, demo=False):
        """
        Args:
            demo: –†–µ–∂–∏–º –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        self.demo = demo
        self.oauth_server = f'https://oauth{"dev" if demo else ""}.alor.ru'
        self.refresh_token = self._load_refresh_token()
        self.jwt_token = None
        self.jwt_token_issued = 0
        self.jwt_token_ttl = 60  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        if not self.refresh_token:
            raise ValueError("Refresh Token –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ ALOR_REFRESH_TOKEN –≤ .env —Ñ–∞–π–ª")
    
    def _load_refresh_token(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Refresh Token –∏–∑ .env —Ñ–∞–π–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.environ.get('ALOR_REFRESH_TOKEN')
        if token:
            return token
        
        # –ï—Å–ª–∏ –Ω–µ—Ç ALOR_REFRESH_TOKEN, –ø—Ä–æ–±—É–µ–º ALOR_API_TOKEN (–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏ –µ—Å—Ç—å refresh token)
        token = os.environ.get('ALOR_API_TOKEN')
        if token:
            return token
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            try:
                with open(env_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º ALOR_REFRESH_TOKEN
                    for line in content.split('\n'):
                        line = line.strip()
                        if line.startswith('ALOR_REFRESH_TOKEN='):
                            return line.split('=', 1)[1].strip()
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º ALOR_API_TOKEN
                    for line in content.split('\n'):
                        line = line.strip()
                        if line.startswith('ALOR_API_TOKEN='):
                            return line.split('=', 1)[1].strip()
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        
        return None
    
    def get_jwt_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ Refresh Token
        
        Returns:
            JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        now = int(datetime.timestamp(datetime.now()))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if self.jwt_token is None or now - self.jwt_token_issued > self.jwt_token_ttl:
            try:
                logger.info("–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω...")
                
                response = requests.post(
                    url=f'{self.oauth_server}/refresh',
                    params={'token': self.refresh_token},
                    timeout=10
                )
                
                if response.status_code != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                    logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                    self.jwt_token = None
                    self.jwt_token_issued = 0
                    return None
                
                token_data = response.json()
                self.jwt_token = token_data.get('AccessToken')
                self.jwt_token_issued = now
                
                if self.jwt_token:
                    logger.info("‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
                    logger.debug(f"JWT —Ç–æ–∫–µ–Ω: {self.jwt_token[:50]}...")
                else:
                    logger.error("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    logger.error(f"–û—Ç–≤–µ—Ç: {token_data}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
                self.jwt_token = None
                self.jwt_token_issued = 0
                return None
        
        return self.jwt_token


def test_jwt():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    print("üîë –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø JWT –¢–û–ö–ï–ù–ê")
    print("=" * 50)
    
    try:
        jwt_manager = AlorJWTManager()
        
        print(f"üìã Refresh Token –∑–∞–≥—Ä—É–∂–µ–Ω: {len(jwt_manager.refresh_token)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: {jwt_manager.refresh_token[:20]}...")
        
        jwt_token = jwt_manager.get_jwt_token()
        
        if jwt_token:
            print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {len(jwt_token)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üîç –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: {jwt_token[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JWT
            if jwt_token.count('.') >= 2:
                print("‚úÖ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JWT —Ç–æ–∫–µ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏)")
            else:
                print("‚ùå –ù–µ –ø–æ—Ö–æ–∂ –Ω–∞ JWT —Ç–æ–∫–µ–Ω")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –ù—É–∂–Ω–æ:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å Refresh Token –Ω–∞ https://alor.dev/login")
        print("2. –î–æ–±–∞–≤–∏—Ç—å ALOR_REFRESH_TOKEN –≤ .env —Ñ–∞–π–ª")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    test_jwt()
