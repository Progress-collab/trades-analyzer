#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ AlorPy, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ API —Ç–æ–∫–µ–Ω
"""

import os
import time
import logging
from datetime import datetime
from alor_api import AlorAPI

logger = logging.getLogger(__name__)


class AlorRealTimeMonitor:
    """Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—ã—Å—Ç—Ä—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, update_interval=3.0):
        self.alor = AlorAPI()
        self.update_interval = update_interval
        self.running = False
        self.previous_data = {}
        self.update_count = 0
        
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def get_order_book_data(self, symbol):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ —á–µ—Ä–µ–∑ HTTP API
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç real-time —á–µ—Ä–µ–∑ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        """
        try:
            quote_data = self.alor.get_quote(symbol)
            if quote_data and 'error' not in quote_data:
                return {
                    'symbol': symbol,
                    'bid': quote_data.get('bid'),
                    'ask': quote_data.get('ask'),
                    'last_price': quote_data.get('last_price'),
                    'orderbook_time': quote_data.get('orderbook_time'),
                    'last_trade_time': quote_data.get('last_trade_time'),
                    'volume': quote_data.get('volume'),
                    'change_percent': quote_data.get('change_percent')
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None
    
    def format_change_indicator(self, current, previous):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if previous is None or current is None:
            return " "
        
        if current > previous:
            return "‚Üë"
        elif current < previous:
            return "‚Üì"
        else:
            return "="
    
    def display_realtime_table(self, instruments_data):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.clear_screen()
        
        print("=" * 100)
        print("‚ö° REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì ALOR (–ë—ã—Å—Ç—Ä—ã–π HTTP)")
        print("=" * 100)
        print(f"{'–ò–Ω—Å—Ç—Ä':<6} {'Bid':<10} {'Ask':<10} {'Last':<10} {'–°–ø—Ä–µ–¥':<8} {'–ò–∑–º%':<8} {'–û–±—ä–µ–º':<10} {'–û–±–Ω–æ–≤–ª–µ–Ω':<12}")
        print("-" * 100)
        
        current_time = datetime.now()
        
        for symbol, data in instruments_data.items():
            if not data:
                print(f"{symbol:<6} {'ERROR':<10} {'ERROR':<10} {'ERROR':<10} {'ERROR':<8} {'ERROR':<8} {'ERROR':<10} {'ERROR':<12}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            prev_data = self.previous_data.get(symbol, {})
            
            bid = data.get('bid', 0)
            ask = data.get('ask', 0) 
            last = data.get('last_price', 0)
            change_pct = data.get('change_percent', 0)
            volume = data.get('volume', 0)
            orderbook_time = data.get('orderbook_time')
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
            bid_ind = self.format_change_indicator(bid, prev_data.get('bid'))
            ask_ind = self.format_change_indicator(ask, prev_data.get('ask'))
            last_ind = self.format_change_indicator(last, prev_data.get('last_price'))
            
            # –°–ø—Ä–µ–¥
            spread = ask - bid if (bid and ask) else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º
            if volume >= 1000:
                vol_str = f"{volume/1000:.1f}k"
            else:
                vol_str = str(int(volume))
            
            # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if orderbook_time and 'T' in str(orderbook_time):
                time_str = str(orderbook_time).split('T')[1][:8]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                try:
                    ob_time = datetime.fromisoformat(str(orderbook_time).replace('Z', '+00:00'))
                    delay = (current_time - ob_time.replace(tzinfo=None)).total_seconds()
                    if delay > 60:
                        time_str += f" (-{int(delay/60)}–º)"
                    elif delay > 5:
                        time_str += f" (-{int(delay)}—Å)"
                except:
                    pass
            else:
                time_str = "NO_DATA"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            print(f"{symbol:<6} {bid_ind}{bid:<9.4f} {ask_ind}{ask:<9.4f} {last_ind}{last:<9.4f} {spread:<8.4f} {change_pct:<+7.2f}% {vol_str:<10} {time_str:<12}")
        
        print("-" * 100)
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time.strftime('%H:%M:%S')} | üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}—Å | #{self.update_count}")
        print("=" * 100)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        instruments = self.alor.load_instruments_list()
        
        if not instruments:
            print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        print(f"‚ö° –ó–∞–ø—É—Å–∫ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval} —Å–µ–∫—É–Ω–¥")
        print("‚ùå Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        time.sleep(2)
        
        self.running = True
        
        try:
            while self.running:
                start_time = time.time()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
                instruments_data = {}
                for symbol in instruments:
                    instruments_data[symbol] = self.get_order_book_data(symbol)
                
                request_time = time.time() - start_time
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self.display_realtime_table(instruments_data)
                
                print(f"üìä –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.2f}—Å")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–∞–Ω–Ω—ã—Ö
                delays = []
                for symbol, data in instruments_data.items():
                    if data and data.get('orderbook_time'):
                        try:
                            ob_time = datetime.fromisoformat(str(data['orderbook_time']).replace('Z', '+00:00'))
                            delay = (datetime.now() - ob_time.replace(tzinfo=None)).total_seconds()
                            delays.append(delay)
                        except:
                            pass
                
                if delays:
                    avg_delay = sum(delays) / len(delays)
                    print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {avg_delay:.0f} —Å–µ–∫—É–Ω–¥")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                self.previous_data = {k: v for k, v in instruments_data.items() if v}
                self.update_count += 1
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                time.sleep(max(0, self.update_interval - request_time))
                
        except KeyboardInterrupt:
            print(f"\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            self.running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.running = False


def main():
    print("‚ö° REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì ALOR")
    print("–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    intervals = {
        "1": 3.0,
        "2": 5.0, 
        "3": 7.0,
        "4": 10.0
    }
    
    print("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print("1. 3 —Å–µ–∫—É–Ω–¥—ã")
    print("2. 5 —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("3. 7 —Å–µ–∫—É–Ω–¥") 
    print("4. 10 —Å–µ–∫—É–Ω–¥")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ (1-4): ").strip() or "2"
    interval = intervals.get(choice, 5.0)
    
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥")
    
    monitor = AlorRealTimeMonitor(update_interval=interval)
    monitor.start_monitoring()


if __name__ == "__main__":
    main()
