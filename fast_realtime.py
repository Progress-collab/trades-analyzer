#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ HTTP API —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
–ò–Ω—Ç–µ—Ä–≤–∞–ª 0.5 —Å–µ–∫—É–Ω–¥—ã - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import time
import asyncio
import logging
from datetime import datetime
from alor_api import AlorAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.ERROR)


class FastRealTimeMonitor:
    """–ë—ã—Å—Ç—Ä—ã–π real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ HTTP API"""
    
    def __init__(self, update_interval=0.5):
        """
        Args:
            update_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5—Å)
        """
        self.alor = AlorAPI()
        self.update_interval = update_interval
        self.running = False
        self.previous_data = {}
        self.update_count = 0
        
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def format_price_with_change(self, current, previous, precision=4):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        Args:
            current: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            previous: –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞
            precision: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        if current is None:
            return "     N/A "
        
        if previous is None:
            return f" {current:>{8}.{precision}f}"
        
        if current > previous:
            return f"‚Üë{current:>{8}.{precision}f}"  # –†–æ—Å—Ç - —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
        elif current < previous:
            return f"‚Üì{current:>{8}.{precision}f}"  # –ü–∞–¥–µ–Ω–∏–µ - —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
        else:
            return f"={current:>{8}.{precision}f}"   # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–∞–≤–Ω–æ
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        print("=" * 110)
        print("‚ö° –ë–´–°–¢–†–´–ô REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì ALOR (HTTP API)")
        print("=" * 110)
        print(f"{'–ò–Ω—Å—Ç—Ä.':<6} {'Bid':<12} {'Ask':<12} {'Last':<12} {'Spread':<8} {'Change%':<9} {'Vol.':<8} {'–û–±–Ω–æ–≤–ª–µ–Ω':<15}")
        print("-" * 110)
    
    def print_quote_row(self, symbol, data):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            data: –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        """
        if 'error' in data:
            print(f"{symbol:<6} {'ERROR':<12} {'ERROR':<12} {'ERROR':<12} {'ERROR':<8} {'ERROR':<9} {'ERROR':<8} {'ERROR':<15}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        bid = data.get('bid')
        ask = data.get('ask') 
        last = data.get('last_price')
        change_pct = data.get('change_percent', 0)
        volume = data.get('volume', 0)
        orderbook_time = data.get('orderbook_time', 'N/A')
        
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        prev_data = self.previous_data.get(symbol, {})
        prev_bid = prev_data.get('bid')
        prev_ask = prev_data.get('ask')
        prev_last = prev_data.get('last_price')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        bid_str = self.format_price_with_change(bid, prev_bid)
        ask_str = self.format_price_with_change(ask, prev_ask)
        last_str = self.format_price_with_change(last, prev_last)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
        if isinstance(bid, (int, float)) and isinstance(ask, (int, float)):
            spread = ask - bid
            spread_str = f"{spread:.4f}"
        else:
            spread_str = "N/A"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        if change_pct > 0:
            change_str = f"‚Üë{change_pct:+5.2f}%"
        elif change_pct < 0:
            change_str = f"‚Üì{change_pct:+5.2f}%"
        else:
            change_str = f"={change_pct:+5.2f}%"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º
        if isinstance(volume, (int, float)):
            if volume >= 1000:
                vol_str = f"{volume/1000:.1f}k"
            else:
                vol_str = str(int(volume))
        else:
            vol_str = "N/A"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ç –±–∏—Ä–∂–∏
        if orderbook_time and orderbook_time != 'N/A':
            if 'T' in str(orderbook_time):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
                time_part = str(orderbook_time).split('T')[1]
                time_only = time_part[:8]  # HH:MM:SS (–±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
            else:
                time_only = str(orderbook_time)[:8]
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ç –±–∏—Ä–∂–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            time_only = "NO_DATA"
        
        print(f"{symbol:<6} {bid_str:<12} {ask_str:<12} {last_str:<12} {spread_str:<8} {change_str:<9} {vol_str:<8} {time_only:<15}")
    
    def print_footer(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥–≤–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        print("-" * 110)
        current_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]  # –° –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} | üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}—Å | #{self.update_count} | ‚ùå Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 110)
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"""
        try:
            start_time = time.time()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            instruments = self.alor.load_instruments_list()
            
            if not instruments:
                print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            quotes = self.alor.get_multiple_quotes(instruments)
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
            self.clear_screen()
            self.print_header()
            
            # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            for symbol in instruments:
                data = quotes.get(symbol, {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
                self.print_quote_row(symbol, data)
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            request_time = time.time() - start_time
            
            self.print_footer()
            print(f"üìä –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f}—Å | üöÄ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.update_interval}—Å")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            self.previous_data = {
                symbol: data for symbol, data in quotes.items() 
                if 'error' not in data
            }
            
            self.update_count += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_interval} —Å–µ–∫—É–Ω–¥")
        print("‚ùå –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        time.sleep(2)
        
        self.running = True
        request_times = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        try:
            while self.running:
                start_time = time.time()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
                instruments = self.alor.load_instruments_list()
                if not instruments:
                    print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                    break
                
                quotes = self.alor.get_multiple_quotes(instruments)
                request_time = time.time() - start_time
                
                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω
                self.clear_screen()
                self.print_header()
                
                for symbol in instruments:
                    data = quotes.get(symbol, {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"})
                    self.print_quote_row(symbol, data)
                
                self.print_footer()
                print(f"üìä –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.3f}—Å | üöÄ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.update_interval}—Å")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                self.previous_data = {
                    symbol: data for symbol, data in quotes.items() 
                    if 'error' not in data
                }
                self.update_count += 1
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–æ–≤
                request_times.append(request_time)
                if len(request_times) > 5:
                    request_times.pop(0)  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                
                avg_request_time = sum(request_times) / len(request_times)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if avg_request_time >= self.update_interval * 0.8:
                    recommended_interval = avg_request_time + 1.0
                    print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ {avg_request_time:.1f}—Å –±–ª–∏–∑–∫–æ –∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É {self.update_interval}—Å")
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª {recommended_interval:.1f}—Å –∏–ª–∏ –±–æ–ª—å—à–µ")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è
                actual_wait = max(0, self.update_interval - request_time)
                time.sleep(actual_wait)
                
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count}")
            self.running = False
        except Exception as e:
            print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.running = False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("‚ö° –ë–´–°–¢–†–´–ô REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì")
    print("=" * 50)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
    print("  1. 3.0 —Å–µ–∫—É–Ω–¥—ã (–±—ã—Å—Ç—Ä–æ)")
    print("  2. 5.0 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")  
    print("  3. 7.0 —Å–µ–∫—É–Ω–¥ (–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ)")
    print("  4. 10.0 —Å–µ–∫—É–Ω–¥ (—ç–∫–æ–Ω–æ–º–∏—á–Ω–æ)")
    print("  5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    
    try:
        choice = input("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (1-5, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip() or "2"
        
        if choice == "5":
            interval = float(input("üîß –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 3.0): ") or "5.0")
            if interval < 3.0:
                print("‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 3.0 —Å–µ–∫—É–Ω–¥—ã")
                interval = 3.0
        else:
            intervals = {"1": 3.0, "2": 5.0, "3": 7.0, "4": 10.0}
            interval = intervals.get(choice, 5.0)
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥")
        
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = FastRealTimeMonitor(update_interval=interval)
    monitor.start_monitoring()


if __name__ == "__main__":
    main()
