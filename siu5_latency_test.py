#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ SiU5 - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ
"""

import os
import sys
from datetime import datetime
from time import sleep
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy


class SiU5LatencyTest:
    """–¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è SiU5 —Å –∞–Ω–∞–ª–∏–∑–æ–º timestamp"""
    
    def __init__(self):
        self.refresh_token = self._load_token()
        if not self.refresh_token:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        self.ap = AlorPy(refresh_token=self.refresh_token)
        self.measurements = []
        self.running = False
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    def on_orderbook_change(self, response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ SiU5"""
        if not self.running:
            return
            
        try:
            # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Google)
            computer_time = datetime.now()
            
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                spread = ask - bid
                
                # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–ö–ê–ù–ê SiU5 #{len(self.measurements)+1}")
                print("-" * 70)
                print(f"üïê –í—Ä–µ–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:     {computer_time.strftime('%H:%M:%S.%f')}")
                print(f"üìà Bid: {bid:>10.2f} | Ask: {ask:>10.2f} | –°–ø—Ä–µ–¥: {spread:>6.2f}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ data
                time_fields_found = []
                
                for key, value in data.items():
                    if 'time' in key.lower() or key in ['timestamp', 'ts', 'datetime']:
                        time_fields_found.append((key, value))
                        print(f"üïê data.{key}: {value}")
                        
                        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
                        try:
                            if isinstance(value, (int, float)):
                                if value > 1e12:  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                                    dt = datetime.fromtimestamp(value / 1000)
                                    latency_ms = (computer_time - dt).total_seconds() * 1000
                                    print(f"   ‚Üí {dt.strftime('%H:%M:%S.%f')} (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)")
                                    print(f"   ‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:+7.1f} –º—Å")
                                elif value > 1e9:  # –°–µ–∫—É–Ω–¥—ã
                                    dt = datetime.fromtimestamp(value)
                                    latency_ms = (computer_time - dt).total_seconds() * 1000
                                    print(f"   ‚Üí {dt.strftime('%H:%M:%S.%f')} (—Å–µ–∫—É–Ω–¥—ã)")
                                    print(f"   ‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:+7.1f} –º—Å")
                            elif isinstance(value, str):
                                if 'T' in value:
                                    dt = datetime.fromisoformat(value.replace('Z', '+00:00'))
                                    dt = dt.replace(tzinfo=None)
                                    latency_ms = (computer_time - dt).total_seconds() * 1000
                                    print(f"   ‚Üí {dt.strftime('%H:%M:%S.%f')} (ISO)")
                                    print(f"   ‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:+7.1f} –º—Å")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ response
                for key, value in response.items():
                    if 'time' in key.lower() or key in ['timestamp', 'ts', 'datetime']:
                        if (key, value) not in time_fields_found:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                            print(f"üïê response.{key}: {value}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                if not time_fields_found:
                    print("‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                
                self.measurements.append({
                    'computer_time': computer_time,
                    'bid': bid,
                    'ask': ask,
                    'spread': spread,
                    'raw_data': data,
                    'raw_response': response
                })
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ 25 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                if len(self.measurements) >= 25:
                    self.running = False
                    print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(self.measurements)} –∏–∑–º–µ—Ä–µ–Ω–∏–π - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def show_latency_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.measurements:
            return
        
        print("\n" + "="*70)
        print("üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ï–†–ñ–ö–ò SiU5")
        print("="*70)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ ms_timestamp (—Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ)
        ms_latencies = []
        sec_latencies = []
        
        for measurement in self.measurements:
            computer_time = measurement['computer_time']
            data = measurement['raw_data']
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º (—Ç–æ—á–Ω–∞—è)
            if 'ms_timestamp' in data:
                ms_ts = data['ms_timestamp']
                if isinstance(ms_ts, (int, float)) and ms_ts > 1e12:
                    exchange_time = datetime.fromtimestamp(ms_ts / 1000)
                    latency = (computer_time - exchange_time).total_seconds() * 1000
                    ms_latencies.append(latency)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º (–º–µ–Ω–µ–µ —Ç–æ—á–Ω–∞—è)
            if 'timestamp' in data:
                sec_ts = data['timestamp']
                if isinstance(sec_ts, (int, float)) and sec_ts > 1e9:
                    exchange_time = datetime.fromtimestamp(sec_ts)
                    latency = (computer_time - exchange_time).total_seconds() * 1000
                    sec_latencies.append(latency)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–Ω—ã–º timestamp (–≥–ª–∞–≤–Ω–∞—è)
        if ms_latencies:
            avg_ms = sum(ms_latencies) / len(ms_latencies)
            min_ms = min(ms_latencies)
            max_ms = max(ms_latencies)
            
            print(f"üéØ –¢–û–ß–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê (–ø–æ ms_timestamp):")
            print(f"   üìä –ò–∑–º–µ—Ä–µ–Ω–∏–π:      {len(ms_latencies)}")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è:        {avg_ms:6.1f} –º—Å")
            print(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è:    {min_ms:6.1f} –º—Å")
            print(f"   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:   {max_ms:6.1f} –º—Å")
            print(f"   üìä –†–∞–∑–±—Ä–æ—Å:        {max_ms - min_ms:6.1f} –º—Å")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if avg_ms < 50:
                print("   ‚úÖ –ü–†–ï–í–û–°–•–û–î–ù–û: < 50–º—Å")
            elif avg_ms < 100:
                print("   ‚úÖ –û–¢–õ–ò–ß–ù–û: < 100–º—Å")
            elif avg_ms < 200:
                print("   ‚úÖ –•–û–†–û–®–û: < 200–º—Å")
            elif avg_ms < 500:
                print("   ‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–û: < 500–º—Å")
            else:
                print("   ‚ùå –ú–ï–î–õ–ï–ù–ù–û: > 500–º—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∫—É–Ω–¥–Ω—ã–º timestamp (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        if sec_latencies:
            avg_sec = sum(sec_latencies) / len(sec_latencies)
            print(f"\nüìä –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º: {avg_sec:6.1f} –º—Å (–º–µ–Ω–µ–µ —Ç–æ—á–Ω–æ)")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = (self.measurements[-1]['computer_time'] - self.measurements[0]['computer_time']).total_seconds()
        frequency = len(self.measurements) / total_time
        
        print(f"\nüîÑ –ß–ê–°–¢–û–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô:")
        print(f"   üìä –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:    {total_time:6.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–π:     {len(self.measurements)}")
        print(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞:        {frequency:6.1f} —Ä–∞–∑/—Å–µ–∫")
        
        print("="*70)
    
    def start_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç"""
        print("üéØ –¢–ï–°–¢ –ó–ê–î–ï–†–ñ–ö–ò SiU5 - 25 –ò–ó–ú–ï–†–ï–ù–ò–ô")
        print("=" * 70)
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ SiU5 (–¥–æ–ª–ª–∞—Ä-—Ä—É–±–ª—å)...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.ap.on_change_order_book = self.on_orderbook_change
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ SiU5
            guid = self.ap.order_book_get_and_subscribe('MOEX', 'SiU5')
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {guid[:8]}...")
            print("‚ö° –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞–∫–∞–Ω–∞...")
            
            self.running = True
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ –Ω–µ —Å–æ–±–µ—Ä–µ–º 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
            while self.running:
                sleep(0.1)
            
            print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_latency_statistics()
            
            # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            os._exit(0)
            
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            os._exit(0)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            os._exit(1)


def main():
    try:
        test = SiU5LatencyTest()
        test.start_test()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    main()
