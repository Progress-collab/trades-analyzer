#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ULTIMATE REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–°–ï–• –§–¨–Æ–ß–ï–†–°–û–í
–° –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ms_timestamp
"""

import os
import sys
from datetime import datetime
from time import sleep
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy


class UltimateRealTimeMonitor:
    """Ultimate real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self):
        self.refresh_token = self._load_token()
        if not self.refresh_token:
            raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        
        self.ap = AlorPy(refresh_token=self.refresh_token)
        self.instruments_data = {}
        self.subscriptions = []
        self.running = False
        self.update_count = 0
        self.start_time = None
        self.latency_measurements = []
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ .env"""
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    def load_instruments_list(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        instruments = []
        filepath = os.path.join(os.path.dirname(__file__), 'instruments.txt')
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        instruments.append(line.upper())
            return instruments
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def format_change_indicator(self, current, previous):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if previous is None or current is None:
            return " "
        
        if current > previous:
            return "‚Üë"
        elif current < previous:
            return "‚Üì"
        else:
            return "="
    
    def calculate_latency(self, computer_time, data):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ ms_timestamp"""
        try:
            if 'ms_timestamp' in data:
                ms_ts = data['ms_timestamp']
                if isinstance(ms_ts, (int, float)) and ms_ts > 1e12:
                    exchange_time = datetime.fromtimestamp(ms_ts / 1000)
                    latency_ms = (computer_time - exchange_time).total_seconds() * 1000
                    return latency_ms, exchange_time
        except:
            pass
        return None, None
    
    def on_orderbook_update(self, response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        if not self.running:
            return
            
        try:
            computer_time = datetime.now()
            data = response.get('data', {})
            guid = response.get('guid')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            symbol = 'UNKNOWN'
            if guid and guid in self.ap.subscriptions:
                subscription = self.ap.subscriptions[guid]
                symbol = subscription.get('code', 'UNKNOWN')
            
            if data.get('bids') and data.get('asks') and symbol != 'UNKNOWN':
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                spread = ask - bid
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                latency_ms, exchange_time = self.calculate_latency(computer_time, data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                if latency_ms is not None:
                    self.latency_measurements.append(latency_ms)
                    # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    if len(self.latency_measurements) > 50:
                        self.latency_measurements.pop(0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                prev_data = self.instruments_data.get(symbol, {})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.instruments_data[symbol] = {
                    'bid': bid,
                    'ask': ask,
                    'spread': spread,
                    'prev_bid': prev_data.get('bid'),
                    'prev_ask': prev_data.get('ask'),
                    'last_update': computer_time,
                    'exchange_time': exchange_time,
                    'latency_ms': latency_ms,
                    'update_count': prev_data.get('update_count', 0) + 1
                }
                
                self.update_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –∫–∞–∂–¥—ã–µ 3 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.update_count % 3 == 0:
                    self.display_table()
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def get_avg_latency(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞–¥–µ—Ä–∂–∫—É"""
        if self.latency_measurements:
            return sum(self.latency_measurements) / len(self.latency_measurements)
        return 0
    
    def display_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if not self.instruments_data:
            return
            
        self.clear_screen()
        
        print("=" * 100)
        print("üöÄ ULTIMATE REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–¨–Æ–ß–ï–†–°–û–í (—Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏)")
        print("=" * 100)
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if self.start_time:
            uptime = (datetime.now() - self.start_time).total_seconds()
            avg_latency = self.get_avg_latency()
            print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.0f}—Å | üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.update_count} | ‚ö° –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:.0f}–º—Å")
        
        print(f"{'–§—å—é—á–µ—Ä—Å':<8} {'Bid':<12} {'Ask':<12} {'–°–ø—Ä–µ–¥':<8} {'–ó–∞–¥–µ—Ä–∂–∫–∞':<10} {'–û–±–Ω–æ–≤–ª.':<8} {'–í—Ä–µ–º—è –±–∏—Ä–∂–∏':<12}")
        print("-" * 100)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        sorted_instruments = sorted(self.instruments_data.items())
        
        for symbol, data in sorted_instruments:
            bid = data.get('bid', 0)
            ask = data.get('ask', 0)
            spread = data.get('spread', 0)
            latency_ms = data.get('latency_ms')
            update_count = data.get('update_count', 0)
            exchange_time = data.get('exchange_time')
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
            bid_ind = self.format_change_indicator(bid, data.get('prev_bid'))
            ask_ind = self.format_change_indicator(ask, data.get('prev_ask'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            if latency_ms is not None:
                if latency_ms < 100:
                    latency_str = f"‚úÖ{latency_ms:>6.0f}–º—Å"
                elif latency_ms < 200:
                    latency_str = f"‚ö°{latency_ms:>6.0f}–º—Å"
                else:
                    latency_str = f"‚ö†Ô∏è{latency_ms:>6.0f}–º—Å"
            else:
                latency_str = "   N/A   "
            
            # –í—Ä–µ–º—è –±–∏—Ä–∂–∏
            if exchange_time:
                time_str = exchange_time.strftime("%H:%M:%S.%f")[:-3]
            else:
                time_str = "N/A"
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if update_count > 50:
                activity = "üî•"
            elif update_count > 20:
                activity = "‚ö°"
            elif update_count > 5:
                activity = "üìä"
            else:
                activity = "üí§"
            
            print(f"{symbol:<8} {bid_ind}{bid:<11.2f} {ask_ind}{ask:<11.2f} {spread:<8.2f} "
                  f"{latency_str:<10} {activity}{update_count:<7d} {time_str:<12}")
        
        print("-" * 100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
        if self.latency_measurements:
            recent_latencies = self.latency_measurements[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            avg_recent = sum(recent_latencies) / len(recent_latencies)
            min_recent = min(recent_latencies)
            max_recent = max(recent_latencies)
            
            print(f"üìà –ó–∞–¥–µ—Ä–∂–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10): –°—Ä–µ–¥–Ω—è—è {avg_recent:.0f}–º—Å | "
                  f"–î–∏–∞–ø–∞–∑–æ–Ω {min_recent:.0f}-{max_recent:.0f}–º—Å")
        
        current_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time} | üåê WebSocket Real-time | ‚ùå Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 100)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ultimate –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        instruments = self.load_instruments_list()
        
        if not instruments:
            print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        print("üöÄ ULTIMATE REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì")
        print("=" * 60)
        print(f"üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(instruments)}")
        print("‚ö° WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏...")
        print("üéØ –û–∂–∏–¥–∞–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ~120-150–º—Å")
        print("-" * 60)
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.ap.on_change_order_book = self.on_orderbook_update
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            for i, symbol in enumerate(instruments):
                print(f"üì° {i+1}/{len(instruments)} –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol}...")
                guid = self.ap.order_book_get_and_subscribe('MOEX', symbol)
                self.subscriptions.append((guid, symbol))
                sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            
            print(f"‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(self.subscriptions)}")
            print("üî• –ü–æ–ª—É—á–µ–Ω–∏–µ real-time –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏...")
            print("-" * 60)
            
            self.start_time = datetime.now()
            self.running = True
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            while self.running:
                sleep(0.5)
                
        except KeyboardInterrupt:
            print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.stop_monitoring()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.stop_monitoring()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        self.running = False
        
        print("üì§ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        for i, (guid, symbol) in enumerate(self.subscriptions):
            try:
                self.ap.unsubscribe(guid)
                print(f"‚úÖ –û—Ç–ø–∏—Å–∫–∞ {symbol} ({i+1}/{len(self.subscriptions)})")
            except:
                pass
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if self.instruments_data and self.start_time:
            uptime = (datetime.now() - self.start_time).total_seconds()
            total_updates = sum(data.get('update_count', 0) for data in self.instruments_data.values())
            
            print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("="*60)
            print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:      {uptime:.0f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:  {total_updates}")
            print(f"üîÑ –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:     {total_updates/uptime:.1f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
            if self.latency_measurements:
                avg_latency = sum(self.latency_measurements) / len(self.latency_measurements)
                min_latency = min(self.latency_measurements)
                max_latency = max(self.latency_measurements)
                
                print(f"\n‚ö° –ê–ù–ê–õ–ò–ó –ó–ê–î–ï–†–ñ–ö–ò:")
                print(f"   üìä –ò–∑–º–µ—Ä–µ–Ω–∏–π:      {len(self.latency_measurements)}")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è:        {avg_latency:6.1f} –º—Å")
                print(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è:    {min_latency:6.1f} –º—Å")
                print(f"   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:   {max_latency:6.1f} –º—Å")
                
                if avg_latency < 100:
                    print("   ‚úÖ –û–¢–õ–ò–ß–ù–û: –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞!")
                elif avg_latency < 200:
                    print("   ‚úÖ –•–û–†–û–®–û: –ë—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞")
                else:
                    print("   ‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–û: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            print(f"\nüìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:")
            for symbol, data in sorted(self.instruments_data.items()):
                updates = data.get('update_count', 0)
                freq = updates / uptime
                last_latency = data.get('latency_ms', 0)
                
                if freq > 2:
                    activity_icon = "üî•"
                elif freq > 1:
                    activity_icon = "‚ö°"
                elif freq > 0.5:
                    activity_icon = "üìä"
                else:
                    activity_icon = "üí§"
                
                print(f"   {activity_icon} {symbol}: {updates:3d} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π "
                      f"({freq:.1f}/—Å–µ–∫) | –ó–∞–¥–µ—Ä–∂–∫–∞: {last_latency:.0f}–º—Å")
            
            print("="*60)
        
        try:
            self.ap.close_web_socket()
            print("‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç")
        except:
            pass
        
        print("üéØ Ultimate –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∏–∑–±–µ–≥–∞–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏—è)
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        os._exit(0)
    
    def on_orderbook_update(self, response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.running:
            return
            
        try:
            computer_time = datetime.now()
            data = response.get('data', {})
            guid = response.get('guid')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            symbol = 'UNKNOWN'
            if guid and guid in self.ap.subscriptions:
                subscription = self.ap.subscriptions[guid]
                symbol = subscription.get('code', 'UNKNOWN')
            
            if data.get('bids') and data.get('asks') and symbol != 'UNKNOWN':
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                spread = ask - bid
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                latency_ms, exchange_time = self.calculate_latency(computer_time, data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                if latency_ms is not None and 0 < latency_ms < 2000:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    self.latency_measurements.append(latency_ms)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                prev_data = self.instruments_data.get(symbol, {})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.instruments_data[symbol] = {
                    'bid': bid,
                    'ask': ask,
                    'spread': spread,
                    'prev_bid': prev_data.get('bid'),
                    'prev_ask': prev_data.get('ask'),
                    'last_update': computer_time,
                    'exchange_time': exchange_time,
                    'latency_ms': latency_ms,
                    'update_count': prev_data.get('update_count', 0) + 1
                }
                
                self.update_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –∫–∞–∂–¥—ã–µ 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                if self.update_count % 5 == 0:
                    self.display_table()
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ultimate –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        instruments = self.load_instruments_list()
        
        if not instruments:
            print("‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        print("üöÄ ULTIMATE REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–¨–Æ–ß–ï–†–°–û–í")
        print("=" * 70)
        print(f"üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(instruments)}")
        print("‚ö° WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ —Å real-time –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏")
        print("üéØ –¶–µ–ª–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ~120-150–º—Å (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤)")
        print("-" * 70)
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.ap.on_change_order_book = self.on_orderbook_update
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            for i, symbol in enumerate(instruments):
                print(f"üì° {i+1}/{len(instruments)} –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol}...")
                guid = self.ap.order_book_get_and_subscribe('MOEX', symbol)
                self.subscriptions.append((guid, symbol))
                sleep(0.3)
            
            print(f"‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(self.subscriptions)}")
            print("üî• –ü–æ–ª—É—á–µ–Ω–∏–µ real-time –¥–∞–Ω–Ω—ã—Ö...")
            print("-" * 70)
            
            self.start_time = datetime.now()
            self.running = True
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            while self.running:
                sleep(0.5)
                
        except KeyboardInterrupt:
            print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ultimate –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.stop_monitoring()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.stop_monitoring()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
        os._exit(0)


def main():
    print("üöÄ ULTIMATE REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–¨–Æ–ß–ï–†–°–û–í")
    print("=" * 70)
    print("üåê WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã")
    print("‚ö° Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏")
    print("üéØ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–∞—Ö: –∑–∞–¥–µ—Ä–∂–∫–∞ ~120-150–º—Å")
    print("‚ùå Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 70)
    
    try:
        monitor = UltimateRealTimeMonitor()
        monitor.start_monitoring()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        os._exit(1)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        os._exit(0)


if __name__ == "__main__":
    main()
