#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –±–∏—Ä–∂–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è
–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ SiU5 (–¥–æ–ª–ª–∞—Ä-—Ä—É–±–ª—å —Å–µ–Ω—Ç—è–±—Ä—å) - 20 —Å–µ–∫—É–Ω–¥
"""

import sys
import os
from datetime import datetime
from time import sleep, time
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy


def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('ALOR_API_TOKEN='):
                    return line.split('=', 1)[1].strip().strip("'\"")
    return None


def main():
    print("‚è±Ô∏è  –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ó–ê–î–ï–†–ñ–ö–ò - SiU5 - 20 –°–ï–ö–£–ù–î")
    print("=" * 60)
    
    measurements = []
    running = [True]
    
    def on_update(response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not running[0]:
            return
            
        try:
            receive_time = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                
                # –ò—â–µ–º timestamp –æ—Ç –±–∏—Ä–∂–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                exchange_timestamp = None
                
                # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç –±–∏—Ä–∂–∏
                timestamp_fields = ['timestamp', 'time', 'exchange_time', 'server_time']
                
                for field in timestamp_fields:
                    if field in data and data[field]:
                        exchange_timestamp = data[field]
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ data, –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ response
                if not exchange_timestamp:
                    for field in timestamp_fields:
                        if field in response and response[field]:
                            exchange_timestamp = response[field]
                            break
                
                latency_ms = None
                exchange_time_str = "NO_TIMESTAMP"
                
                if exchange_timestamp:
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –±–∏—Ä–∂–∏
                        if isinstance(exchange_timestamp, (int, float)):
                            # Unix timestamp
                            if exchange_timestamp > 1e12:  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                                exchange_time = datetime.fromtimestamp(exchange_timestamp / 1000)
                            else:  # –°–µ–∫—É–Ω–¥—ã
                                exchange_time = datetime.fromtimestamp(exchange_timestamp)
                        else:
                            # ISO —Å—Ç—Ä–æ–∫–∞
                            exchange_time = datetime.fromisoformat(str(exchange_timestamp).replace('Z', '+00:00'))
                            exchange_time = exchange_time.replace(tzinfo=None)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                        latency_ms = (receive_time - exchange_time).total_seconds() * 1000
                        exchange_time_str = exchange_time.strftime('%H:%M:%S.%f')[:-3]
                        
                    except Exception as e:
                        exchange_time_str = f"ERROR: {e}"
                
                measurements.append({
                    'receive_time': receive_time,
                    'exchange_time': exchange_timestamp,
                    'latency_ms': latency_ms,
                    'bid': bid,
                    'ask': ask
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ 3-–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if len(measurements) % 3 == 0:
                    receive_str = receive_time.strftime('%H:%M:%S.%f')[:-3]
                    
                    if latency_ms is not None:
                        print(f"üìä #{len(measurements):2d} | –ü–æ–ª—É—á–µ–Ω–æ: {receive_str} | "
                              f"–ë–∏—Ä–∂–∞: {exchange_time_str} | "
                              f"–ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:+7.1f}–º—Å | Bid: {bid:.2f}")
                    else:
                        print(f"üìä #{len(measurements):2d} | –ü–æ–ª—É—á–µ–Ω–æ: {receive_str} | "
                              f"–ë–∏—Ä–∂–∞: {exchange_time_str} | Bid: {bid:.2f}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def stop_timer():
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥"""
        sleep(20)
        running[0] = False
        print("\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ - –∞–≤—Ç–æ—Å—Ç–æ–ø!")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        token = load_token()
        ap = AlorPy(refresh_token=token)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AlorPy")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SiU5 (–¥–æ–ª–ª–∞—Ä-—Ä—É–±–ª—å)
        ap.on_change_order_book = on_update
        guid = ap.order_book_get_and_subscribe('MOEX', 'SiU5')
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SiU5: {guid[:8]}...")
        print("-" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer = threading.Thread(target=stop_timer)
        timer.daemon = True
        timer.start()
        
        start_time = time()
        
        # –ñ–¥–µ–º 20 —Å–µ–∫—É–Ω–¥
        while running[0] and (time() - start_time) < 21:
            sleep(0.1)
        
        running[0] = False
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if measurements:
            print(f"\nüìà –ê–ù–ê–õ–ò–ó –ó–ê–î–ï–†–ñ–ö–ò:")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            valid_latencies = [m['latency_ms'] for m in measurements if m['latency_ms'] is not None]
            
            if valid_latencies:
                avg_latency = sum(valid_latencies) / len(valid_latencies)
                min_latency = min(valid_latencies)
                max_latency = max(valid_latencies)
                
                print(f"   –ò–∑–º–µ—Ä–µ–Ω–∏–π —Å timestamp: {len(valid_latencies)}/{len(measurements)}")
                print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:6.1f} –º—Å")
                print(f"   –ú–∏–Ω –∑–∞–¥–µ—Ä–∂–∫–∞:    {min_latency:6.1f} –º—Å")
                print(f"   –ú–∞–∫—Å –∑–∞–¥–µ—Ä–∂–∫–∞:   {max_latency:6.1f} –º—Å")
                
                if avg_latency < 100:
                    print("   ‚úÖ –û–¢–õ–ò–ß–ù–û: –ó–∞–¥–µ—Ä–∂–∫–∞ < 100–º—Å")
                elif avg_latency < 500:
                    print("   ‚úÖ –•–û–†–û–®–û: –ó–∞–¥–µ—Ä–∂–∫–∞ < 500–º—Å")
                else:
                    print("   ‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û: –ó–∞–¥–µ—Ä–∂–∫–∞ > 500–º—Å")
            else:
                print("   ‚ùå –ù–µ—Ç timestamp –æ—Ç –±–∏—Ä–∂–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏")
                
            total_time = (measurements[-1]['receive_time'] - measurements[0]['receive_time']).total_seconds()
            frequency = len(measurements) / total_time
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {frequency:.1f} —Ä–∞–∑/—Å–µ–∫")
        
        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        os._exit(0)
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        os._exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        os._exit(1)


if __name__ == "__main__":
    main()
