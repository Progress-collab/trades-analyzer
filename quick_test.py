#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ - 20 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
"""

import sys
import os
from datetime import datetime
from time import sleep, time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy


def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('ALOR_API_TOKEN='):
                    return line.split('=', 1)[1].strip().strip("'\"")
    return None


def main():
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ - 20 –°–ï–ö–£–ù–î")
    print("=" * 40)
    
    measurements = []
    
    def on_update(response):
        """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        try:
            now = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                bid = data['bids'][0]['price']
                ask = data['asks'][0]['price']
                
                measurements.append({
                    'time': now,
                    'bid': bid,
                    'ask': ask
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ 5-–µ
                if len(measurements) % 5 == 0:
                    print(f"üìä #{len(measurements):2d} | {now.strftime('%H:%M:%S.%f')[:-3]} | Bid: {bid:.4f}")
                    
        except:
            pass
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        token = load_token()
        ap = AlorPy(refresh_token=token)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞
        ap.on_change_order_book = on_update
        guid = ap.order_book_get_and_subscribe('MOEX', 'PDU5')
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {guid[:8]}...")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 20 —Å–µ–∫—É–Ω–¥
        start_time = time()
        while (time() - start_time) < 20:
            sleep(0.1)
        
        print("\n‚è∞ 20 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ!")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if measurements:
            total_time = (measurements[-1]['time'] - measurements[0]['time']).total_seconds()
            frequency = len(measurements) / total_time if total_time > 0 else 0
            
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(measurements)}")
            print(f"   –í—Ä–µ–º—è: {total_time:.1f}—Å")
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {frequency:.1f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if len(measurements) > 1:
                intervals = []
                for i in range(1, len(measurements)):
                    interval_ms = (measurements[i]['time'] - measurements[i-1]['time']).total_seconds() * 1000
                    intervals.append(interval_ms)
                
                avg_interval = sum(intervals) / len(intervals)
                print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {avg_interval:.0f}–º—Å")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
