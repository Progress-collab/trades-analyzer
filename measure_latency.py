#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö –æ—Ç Alor API –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
"""

import sys
import os
import logging
from datetime import datetime
from time import sleep
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ AlorPy
sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))

from AlorPy import AlorPy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR)


class LatencyMeasurer:
    """–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
        self.refresh_token = self._load_token()
        if not self.refresh_token:
            raise ValueError("Refresh Token –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        self.ap = AlorPy(refresh_token=self.refresh_token)
        self.measurements = []
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ .env"""
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    def on_orderbook_update(self, response):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            receive_time = datetime.now()
            data = response.get('data', {})
            
            if data.get('bids') and data.get('asks'):
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç –±–∏—Ä–∂–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                exchange_timestamp = data.get('timestamp')  # –í—Ä–µ–º—è –æ—Ç –±–∏—Ä–∂–∏
                
                if exchange_timestamp:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –±–∏—Ä–∂–∏ –≤ datetime
                    if isinstance(exchange_timestamp, (int, float)):
                        exchange_time = datetime.fromtimestamp(exchange_timestamp)
                    else:
                        exchange_time = datetime.fromisoformat(str(exchange_timestamp).replace('Z', '+00:00'))
                        exchange_time = exchange_time.replace(tzinfo=None)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    latency_ms = (receive_time - exchange_time).total_seconds() * 1000
                    
                    self.measurements.append({
                        'latency_ms': latency_ms,
                        'exchange_time': exchange_time,
                        'receive_time': receive_time,
                        'bid': data['bids'][0]['price'],
                        'ask': data['asks'][0]['price']
                    })
                    
                    print(f"üìä {receive_time.strftime('%H:%M:%S.%f')[:-3]} | "
                          f"–ë–∏—Ä–∂–∞: {exchange_time.strftime('%H:%M:%S.%f')[:-3]} | "
                          f"–ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:+8.1f}–º—Å | "
                          f"Bid: {data['bids'][0]['price']:.4f}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –±–∏—Ä–∂–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    print(f"üìä {receive_time.strftime('%H:%M:%S.%f')[:-3]} | "
                          f"Bid: {data['bids'][0]['price']:.4f} | "
                          f"Ask: {data['asks'][0]['price']:.4f} | "
                          f"–ù–µ—Ç timestamp –±–∏—Ä–∂–∏")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 20 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                if len(self.measurements) > 0 and len(self.measurements) % 20 == 0:
                    self.show_latency_stats()
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {e}")
    
    def show_latency_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.measurements:
            return
        
        latencies = [m['latency_ms'] for m in self.measurements[-20:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20
        
        avg_latency = sum(latencies) / len(latencies)
        min_latency = min(latencies)
        max_latency = max(latencies)
        
        print("\n" + "="*60)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ï–†–ñ–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–∑–º–µ—Ä–µ–Ω–∏–π)")
        print("="*60)
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {avg_latency:6.1f} –º—Å")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è:     {min_latency:6.1f} –º—Å")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:    {max_latency:6.1f} –º—Å")
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.measurements)}")
        print("="*60 + "\n")
    
    def start_measurement(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        print("‚è±Ô∏è  –ò–ó–ú–ï–†–ï–ù–ò–ï –ó–ê–î–ï–†–ñ–ö–ò WEBSOCKET ALOR")
        print("=" * 60)
        print("üéØ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ PDU5 –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏...")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.ap.on_change_order_book = self.on_orderbook_update
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            guid = self.ap.order_book_get_and_subscribe('MOEX', 'PDU5')
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {guid}")
            print("‚ö° –ò–∑–º–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            print("-" * 60)
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            while True:
                sleep(1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if self.measurements:
                self.show_latency_stats()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                all_latencies = [m['latency_ms'] for m in self.measurements]
                print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   –ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(all_latencies)}")
                print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {sum(all_latencies)/len(all_latencies):.1f} –º—Å")
                print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min(all_latencies):.1f} - {max(all_latencies):.1f} –º—Å")
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            try:
                self.ap.unsubscribe(guid)
                self.ap.close_web_socket()
                print("‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()


def main():
    try:
        measurer = LatencyMeasurer()
        measurer.start_measurement()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    main()
