#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
"""

import os
import sys
import requests
from datetime import datetime
import time

def test_time_precision():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏"""
    print("üïê –¢–û–ß–ù–´–ô –¢–ï–°–¢ –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    for i in range(5):
        try:
            # –í—Ä–µ–º—è –î–û –∑–∞–ø—Ä–æ—Å–∞
            before_request = datetime.now()
            
            # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É Alor
            response = requests.get('https://api.alor.ru/md/v2/time')
            
            # –í—Ä–µ–º—è –ü–û–°–õ–ï –∑–∞–ø—Ä–æ—Å–∞  
            after_request = datetime.now()
            
            if response.status_code == 200:
                server_timestamp = response.json()
                server_time = datetime.fromtimestamp(server_timestamp)
                
                # –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É –¥–æ –∏ –ø–æ—Å–ª–µ)
                request_time = before_request + (after_request - before_request) / 2
                
                print(f"\nüìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ #{i+1}:")
                print(f"   üïê –î–æ –∑–∞–ø—Ä–æ—Å–∞:     {before_request.strftime('%H:%M:%S.%f')}")
                print(f"   üïê –ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞:  {after_request.strftime('%H:%M:%S.%f')}")
                print(f"   üïê –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:  {request_time.strftime('%H:%M:%S.%f')}")
                print(f"   üïê –°–µ—Ä–≤–µ—Ä Alor:    {server_time.strftime('%H:%M:%S.000000')} (–±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)")
                
                # –†–∞–∑–Ω–∏—Ü–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ —Å–µ–∫—É–Ω–¥
                diff_ms = (request_time.timestamp() - server_timestamp) * 1000
                print(f"   ‚ö° –†–∞–∑–Ω–∏—Ü–∞:        {diff_ms:+7.1f} –º—Å")
                
                # –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
                request_duration = (after_request - before_request).total_seconds() * 1000
                print(f"   üì° –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:  {request_duration:6.1f} –º—Å")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        if i < 4:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
            time.sleep(1)
    
    print("\nüí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï:")
    print("   ‚Ä¢ –°–µ—Ä–≤–µ—Ä Alor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–æ –°–ï–ö–£–ù–î (–±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)")
    print("   ‚Ä¢ –ü–æ—ç—Ç–æ–º—É —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
    print("   ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ = –≤–∞—à–∏ —á–∞—Å—ã –æ—Ç—Å—Ç–∞—é—Ç –æ—Ç –±–∏—Ä–∂–∏")
    print("   ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ = –≤–∞—à–∏ —á–∞—Å—ã —Å–ø–µ—à–∞—Ç")

def test_websocket_timestamp():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º timestamp –≤ WebSocket –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ê–ù–ê–õ–ò–ó TIMESTAMP –í WEBSOCKET")
    print("=" * 60)
    
    import sys
    sys.path.append(os.path.join(os.path.dirname(__file__), 'AlorPy'))
    
    from AlorPy import AlorPy
    
    def load_token():
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('ALOR_API_TOKEN='):
                        return line.split('=', 1)[1].strip().strip("'\"")
        return None
    
    measurements = []
    
    def on_update(response):
        if len(measurements) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
            return
            
        try:
            receive_time = datetime.now()
            data = response.get('data', {})
            
            print(f"\nüìä WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ #{len(measurements)+1}:")
            print(f"   üïê –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {receive_time.strftime('%H:%M:%S.%f')}")
            
            # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
            time_fields = ['timestamp', 'time', 'server_time', 'exchange_time']
            
            for field in time_fields:
                if field in data and data[field]:
                    ts = data[field]
                    print(f"   üïê {field}: {ts}")
                    
                    # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                    try:
                        if isinstance(ts, (int, float)):
                            if ts > 1e12:  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                                dt = datetime.fromtimestamp(ts / 1000)
                                print(f"      ‚Üí {dt.strftime('%H:%M:%S.%f')} (–∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)")
                            else:  # –°–µ–∫—É–Ω–¥—ã
                                dt = datetime.fromtimestamp(ts)
                                print(f"      ‚Üí {dt.strftime('%H:%M:%S.%f')} (–∏–∑ —Å–µ–∫—É–Ω–¥)")
                    except:
                        pass
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –∫–æ—Ä–Ω–µ response
            for field in time_fields:
                if field in response and response[field]:
                    ts = response[field]
                    print(f"   üïê response.{field}: {ts}")
            
            measurements.append(receive_time)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    try:
        token = load_token()
        ap = AlorPy(refresh_token=token)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        
        ap.on_change_order_book = on_update
        guid = ap.order_book_get_and_subscribe('MOEX', 'SiU5')
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SiU5: {guid[:8]}...")
        
        # –ñ–¥–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è
        while len(measurements) < 3:
            time.sleep(0.1)
        
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(measurements)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ë—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        os._exit(0)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        os._exit(1)

if __name__ == "__main__":
    test_time_precision()
    test_websocket_timestamp()
